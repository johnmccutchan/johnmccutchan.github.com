{"dependencies":[{"uri":"dart-sdk/lib/core/core.dart","name":"dart:core","id":"dart.core","children":[{"comment":"\nEverything in Dart is an [Object].\n","uri":"dart-sdk/lib/core/object.dart","name":"Object","id":"Object","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"isOperator":true,"comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","name":"==","id":"==1()","children":[{"name":"other","id":"other","kind":"param"}],"line":"29","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"\nReturns a string representation of this object.\n","name":"toString","id":"toString0()","line":"48","kind":"method"},{"comment":"\n[noSuchMethod] is invoked when users invoke a non-existant method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [Invocation].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[noSuchMethodError].\n","name":"noSuchMethod","id":"noSuchMethod1()","children":[{"ref":{"refId":"dart.core/Invocation","name":"Invocation"},"name":"invocation","id":"invocation","kind":"param"}],"line":"60","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","name":"hashCode","id":"hashCode","line":"43","kind":"property"},{"ref":{"refId":"dart.core/Type","name":"Type"},"comment":"\nA representation of the runtime type of the object.\n","name":"runtimeType","id":"runtimeType","line":"65","kind":"property"},{"comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","name":"Object","id":"Object0()","line":"18","kind":"constructor"}],"line":"10","kind":"class"}],"line":"5","kind":"library"},{"uri":"package:spectre/disposable.dart","name":"package:spectre/disposable.dart","id":"disposable","children":[{"isAbstract":true,"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"An abstract class for a disposable object.\nYou must implement [finalize]\n","uri":"package:spectre/src/disposable/disposable.dart","name":"Disposable","id":"Disposable","children":[{"returnType":{"refId":"void","name":"void"},"comment":"Pin the disposable object. See [dispose] for inverse.\nThrows an exception if this object is already disposed.\n","name":"pin","id":"pin0()","line":"38","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Disposes of the object. If nothing else has this object pinned,\nthe finalizer will be called. See [pin] for inverse. Throws\nan exception if the object is already disposed.\n","name":"dispose","id":"dispose0()","line":"50","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Clean up any object state here. ","name":"finalize","id":"finalize0()","line":"63","kind":"method"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"This object has been disposed. ","name":"isDisposed","id":"isDisposed","line":"31","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"Count of pins ","name":"pinCount","id":"pinCount","line":"33","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"_referenceCount","isPrivate":true,"id":"_referenceCount","line":"27","kind":"variable"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"_disposed","isPrivate":true,"id":"_disposed","line":"28","kind":"variable"}],"line":"26","kind":"class"}],"line":"22","kind":"library"}],"comment":"Spectre Library ","uri":"package:spectre/spectre.dart","name":"package:spectre/spectre.dart","id":"spectre","children":[{"returnType":{"refId":"spectre/SkinnedMesh","name":"SkinnedMesh"},"uri":"package:spectre/src/spectre/skinned_mesh.dart","name":"importSkinnedMesh2","id":"importSkinnedMesh23()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"name","id":"name","kind":"param"},{"ref":{"refId":"spectre/GraphicsDevice","name":"GraphicsDevice"},"name":"device","id":"device","kind":"param"},{"ref":{"refId":"dart.core/Map","name":"Map"},"name":"json","id":"json","kind":"param"}],"line":"321","kind":"method"},{"returnType":{"refId":"void","name":"void"},"uri":"package:spectre/src/spectre/skinned_mesh.dart","name":"importAnimation","id":"importAnimation2()","children":[{"ref":{"refId":"spectre/SkinnedMesh","name":"SkinnedMesh"},"name":"mesh","id":"mesh","kind":"param"},{"ref":{"refId":"dart.core/Map","name":"Map"},"name":"json","id":"json","kind":"param"}],"line":"290","kind":"method"},{"returnType":{"refId":"void","name":"void"},"uri":"package:spectre/src/spectre/skinned_mesh.dart","name":"importAnimationFrames","id":"importAnimationFrames3()","children":[{"ref":{"refId":"spectre/SkeletonAnimation","name":"SkeletonAnimation"},"name":"animation","id":"animation","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"boneId","id":"boneId","kind":"param"},{"ref":{"refId":"dart.core/Map","name":"Map"},"name":"ba","id":"ba","kind":"param"}],"line":"277","kind":"method"},{"returnType":{"refId":"void","name":"void"},"uri":"package:spectre/src/spectre/skinned_mesh.dart","name":"importAttribute","id":"importAttribute2()","children":[{"ref":{"refId":"spectre/SkinnedMesh","name":"SkinnedMesh"},"name":"mesh","id":"mesh","kind":"param"},{"ref":{"refId":"dart.core/Map","name":"Map"},"name":"json","id":"json","kind":"param"}],"line":"268","kind":"method"},{"returnType":{"refId":"void","name":"void"},"uri":"package:spectre/src/spectre/skinned_mesh.dart","name":"importMesh","id":"importMesh2()","children":[{"ref":{"refId":"spectre/SkinnedMesh","name":"SkinnedMesh"},"name":"mesh","id":"mesh","kind":"param"},{"ref":{"refId":"dart.core/Map","name":"Map"},"name":"json","id":"json","kind":"param"}],"line":"264","kind":"method"},{"ref":{"refId":"spectre/Logger","name":"Logger"},"uri":"package:spectre/src/spectre/logger.dart","name":"spectreLog","id":"spectreLog","line":"87","kind":"variable"},{"ref":{"refId":"dart.core/String","name":"String"},"isFinal":true,"uri":"package:spectre/src/spectre/debug_draw_manager.dart","name":"_debugLineFragmentShader","isPrivate":true,"id":"_debugLineFragmentShader","line":"633","kind":"variable"},{"ref":{"refId":"dart.core/String","name":"String"},"isFinal":true,"uri":"package:spectre/src/spectre/debug_draw_manager.dart","name":"_debugLineVertexShader","isPrivate":true,"id":"_debugLineVertexShader","line":"615","kind":"variable"},{"superclass":{"refId":"dart.core/Object","name":"Object"},"uri":"package:spectre/src/spectre/vertex_attribute.dart","name":"VertexAttribute","id":"VertexAttribute","children":[{"ref":{"refId":"dart.core/int","name":"int"},"isFinal":true,"comment":"Vertex buffer slot to fetch from.","name":"vboSlot","id":"vboSlot","line":"25","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isFinal":true,"comment":"Shader attribute index.","name":"attributeIndex","id":"attributeIndex","line":"27","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isFinal":true,"comment":"Offset into buffer to fetch at.","name":"attributeOffset","id":"attributeOffset","line":"29","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isFinal":true,"comment":"Stride between vertices.","name":"attributeStride","id":"attributeStride","line":"31","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isFinal":true,"comment":"Type of data.","name":"dataType","id":"dataType","line":"33","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isFinal":true,"comment":"Number of dataType to be fetched for this attribute.","name":"dataCount","id":"dataCount","line":"35","kind":"variable"},{"ref":{"refId":"dart.core/bool","name":"bool"},"isFinal":true,"comment":"Data is converted into a normalized floating point value.\n0.0 ... 1.0 for unsigned, -1.0 ... 1.0 for signed data.","name":"normalizeData","id":"normalizeData","line":"38","kind":"variable"},{"name":"VertexAttribute","id":"VertexAttribute7()","children":[{"initializedField":{"refId":"spectre/VertexAttribute/vboSlot","name":"vboSlot"},"ref":{"refId":"dart.core/int","name":"int"},"name":"vboSlot","id":"vboSlot","kind":"param"},{"initializedField":{"refId":"spectre/VertexAttribute/attributeIndex","name":"attributeIndex"},"ref":{"refId":"dart.core/int","name":"int"},"name":"attributeIndex","id":"attributeIndex","kind":"param"},{"initializedField":{"refId":"spectre/VertexAttribute/attributeOffset","name":"attributeOffset"},"ref":{"refId":"dart.core/int","name":"int"},"name":"attributeOffset","id":"attributeOffset","kind":"param"},{"initializedField":{"refId":"spectre/VertexAttribute/attributeStride","name":"attributeStride"},"ref":{"refId":"dart.core/int","name":"int"},"name":"attributeStride","id":"attributeStride","line":"40","kind":"param"},{"initializedField":{"refId":"spectre/VertexAttribute/dataType","name":"dataType"},"ref":{"refId":"dart.core/int","name":"int"},"name":"dataType","id":"dataType","line":"40","kind":"param"},{"initializedField":{"refId":"spectre/VertexAttribute/dataCount","name":"dataCount"},"ref":{"refId":"dart.core/int","name":"int"},"name":"dataCount","id":"dataCount","line":"40","kind":"param"},{"initializedField":{"refId":"spectre/VertexAttribute/normalizeData","name":"normalizeData"},"ref":{"refId":"dart.core/bool","name":"bool"},"name":"normalizeData","id":"normalizeData","line":"41","kind":"param"}],"line":"39","kind":"constructor"},{"name":"VertexAttribute.atAttributeIndex","id":"VertexAttribute.atAttributeIndex2()","children":[{"ref":{"refId":"spectre/VertexAttribute","name":"VertexAttribute"},"name":"attribute","id":"attribute","kind":"param"},{"initializedField":{"refId":"spectre/VertexAttribute/attributeIndex","name":"attributeIndex"},"ref":{"refId":"dart.core/int","name":"int"},"name":"attributeIndex","id":"attributeIndex","line":"43","kind":"param"}],"line":"42","kind":"constructor"}],"line":"23","kind":"class"},{"superclass":{"refId":"dart.core/Object","name":"Object"},"uri":"package:spectre/src/spectre/skinned_mesh.dart","name":"SkinnedVertex","id":"SkinnedVertex","children":[{"ref":{"refId":"dart.core/int","name":"int"},"isFinal":true,"name":"vertexId","id":"vertexId","line":"315","kind":"variable"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"},"isFinal":true,"name":"bones","id":"bones","line":"316","kind":"variable"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/double","name":"double"}],"name":"List"},"isFinal":true,"name":"weights","id":"weights","line":"317","kind":"variable"},{"name":"SkinnedVertex","id":"SkinnedVertex1()","children":[{"initializedField":{"refId":"spectre/SkinnedVertex/vertexId","name":"vertexId"},"ref":{"refId":"dart.core/int","name":"int"},"name":"vertexId","id":"vertexId","kind":"param"}],"line":"318","kind":"constructor"}],"line":"314","kind":"class"},{"superclass":{"refId":"dart.core/Object","name":"Object"},"uri":"package:spectre/src/spectre/skinned_mesh.dart","name":"SkinnedMeshInstance","id":"SkinnedMeshInstance","children":[{"isSetter":true,"name":"currentTime=","id":"currentTime=1()","children":[{"ref":{"refId":"dart.core/double","name":"double"},"name":"value","id":"value","kind":"param"}],"line":"220","kind":"method"},{"isSetter":true,"name":"currentAnimation=","id":"currentAnimation=1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"name","id":"name","kind":"param"}],"line":"233","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"name":"update","id":"update2()","children":[{"ref":{"refId":"dart.core/double","name":"double"},"name":"dt","id":"dt","kind":"param"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"useSimd","id":"useSimd","kind":"param"}],"line":"243","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"skin","id":"skin1()","children":[{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"useSimd","id":"useSimd","kind":"param"}],"line":"259","kind":"method"},{"ref":{"refId":"dart.core/double","name":"double"},"name":"currentTime","id":"currentTime","line":"219","kind":"property"},{"ref":{"refId":"dart.core/String","name":"String"},"name":"currentAnimation","id":"currentAnimation","line":"232","kind":"property"},{"ref":{"refId":"spectre/SkinnedMesh","name":"SkinnedMesh"},"name":"mesh","id":"mesh","line":"214","kind":"variable"},{"ref":{"refId":"spectre/PosedSkeleton","name":"PosedSkeleton"},"name":"posedSkeleton","id":"posedSkeleton","line":"215","kind":"variable"},{"ref":{"refId":"dart.core/double","name":"double"},"name":"_currentTime","isPrivate":true,"id":"_currentTime","line":"218","kind":"variable"},{"ref":{"refId":"spectre/SkeletonAnimation","name":"SkeletonAnimation"},"name":"_currentAnimation","isPrivate":true,"id":"_currentAnimation","line":"231","kind":"variable"},{"name":"SkinnedMeshInstance","id":"SkinnedMeshInstance1()","children":[{"initializedField":{"refId":"spectre/SkinnedMeshInstance/mesh","name":"mesh"},"ref":{"refId":"spectre/SkinnedMesh","name":"SkinnedMesh"},"name":"mesh","id":"mesh","kind":"param"}],"line":"238","kind":"constructor"}],"line":"213","kind":"class"},{"superclass":{"refId":"spectre/SpectreMesh","name":"SpectreMesh"},"uri":"package:spectre/src/spectre/skinned_mesh.dart","name":"SkinnedMesh","id":"SkinnedMesh","children":[{"returnType":{"refId":"void","name":"void"},"name":"finalize","id":"finalize0()","line":"79","kind":"method"},{"isSetter":true,"name":"currentAnimation=","id":"currentAnimation=1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"name","id":"name","kind":"param"}],"line":"113","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"skin","id":"skin2()","children":[{"ref":{"refId":"spectre/PosedSkeleton","name":"PosedSkeleton"},"name":"pose","id":"pose","kind":"param"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"useSimdSkinning","id":"useSimdSkinning","kind":"param"}],"line":"120","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"_updateVertices","isPrivate":true,"id":"_updateVertices1()","children":[{"ref":{"refId":"spectre/PosedSkeleton","name":"PosedSkeleton"},"name":"pose","id":"pose","kind":"param"}],"line":"133","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"_updateVerticesSIMD","isPrivate":true,"id":"_updateVerticesSIMD1()","children":[{"ref":{"refId":"spectre/PosedSkeleton","name":"PosedSkeleton"},"name":"pose","id":"pose","kind":"param"}],"line":"170","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"resetToBindPose","id":"resetToBindPose0()","line":"202","kind":"method"},{"ref":{"refId":"spectre/IndexBuffer","name":"IndexBuffer"},"name":"indexArray","id":"indexArray","line":"66","kind":"property"},{"ref":{"refId":"spectre/VertexBuffer","name":"VertexBuffer"},"name":"vertexArray","id":"vertexArray","line":"67","kind":"property"},{"ref":{"refId":"spectre/VertexBuffer","name":"VertexBuffer"},"name":"skinningArray","id":"skinningArray","line":"102","kind":"property"},{"ref":{"refId":"dart.core/String","name":"String"},"name":"currentAnimation","id":"currentAnimation","line":"112","kind":"property"},{"ref":{"refId":"spectre/VertexBuffer","name":"VertexBuffer"},"name":"_deviceVertexBuffer","isPrivate":true,"id":"_deviceVertexBuffer","line":"64","kind":"variable"},{"ref":{"refId":"spectre/IndexBuffer","name":"IndexBuffer"},"name":"_deviceIndexBuffer","isPrivate":true,"id":"_deviceIndexBuffer","line":"65","kind":"variable"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/Map","name":"Map"}],"name":"List"},"isFinal":true,"name":"meshes","id":"meshes","line":"68","kind":"variable"},{"ref":{"refId":"dart.typed_data/Float32List","name":"Float32List"},"name":"baseVertexData","id":"baseVertexData","line":"89","kind":"variable"},{"ref":{"refId":"dart.typed_data/Float32List","name":"Float32List"},"name":"vertexData","id":"vertexData","line":"90","kind":"variable"},{"ref":{"refId":"dart.typed_data/Float32x4List","name":"Float32x4List"},"name":"baseVertexData4","id":"baseVertexData4","line":"91","kind":"variable"},{"ref":{"refId":"dart.typed_data/Float32x4List","name":"Float32x4List"},"name":"vertexData4","id":"vertexData4","line":"92","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"_floatsPerVertex","isPrivate":true,"id":"_floatsPerVertex","line":"93","kind":"variable"},{"ref":{"refId":"dart.typed_data/Float32List","name":"Float32List"},"isFinal":true,"name":"globalInverseTransform","id":"globalInverseTransform","line":"94","kind":"variable"},{"ref":{"refId":"dart.typed_data/Float32List","name":"Float32List"},"name":"weightData","id":"weightData","line":"97","kind":"variable"},{"ref":{"refId":"dart.typed_data/Int32List","name":"Int32List"},"name":"boneData","id":"boneData","line":"98","kind":"variable"},{"ref":{"refId":"dart.typed_data/Float32List","name":"Float32List"},"name":"skinningData","id":"skinningData","line":"99","kind":"variable"},{"ref":{"refId":"spectre/VertexBuffer","name":"VertexBuffer"},"name":"_deviceSkinningBuffer","isPrivate":true,"id":"_deviceSkinningBuffer","line":"101","kind":"variable"},{"ref":{"refId":"spectre/Skeleton","name":"Skeleton"},"name":"skeleton","id":"skeleton","line":"104","kind":"variable"},{"ref":{"refId":"dart.core/double","name":"double"},"name":"_currentTime","isPrivate":true,"id":"_currentTime","line":"107","kind":"variable"},{"ref":{"refId":"dart.core/Map","arguments":[{"refId":"dart.core/String","name":"String"},{"refId":"spectre/SkeletonAnimation","name":"SkeletonAnimation"}],"name":"Map"},"isFinal":true,"name":"animations","id":"animations","line":"109","kind":"variable"},{"ref":{"refId":"spectre/SkeletonAnimation","name":"SkeletonAnimation"},"name":"_currentAnimation","isPrivate":true,"id":"_currentAnimation","line":"111","kind":"variable"},{"ref":{"refId":"spectre/SkeletonPoser","name":"SkeletonPoser"},"name":"skeletonPoser","id":"skeletonPoser","line":"117","kind":"variable"},{"ref":{"refId":"spectre/SkeletonPoser","name":"SkeletonPoser"},"name":"skeletonPoserSIMD","id":"skeletonPoserSIMD","line":"118","kind":"variable"},{"ref":{"refId":"dart.core/Stopwatch","name":"Stopwatch"},"isFinal":true,"name":"sw","id":"sw","line":"128","kind":"variable"},{"ref":{"refId":"dart.typed_data/Float32List","name":"Float32List"},"isFinal":true,"name":"m","id":"m","line":"130","kind":"variable"},{"ref":{"refId":"dart.typed_data/Float32List","name":"Float32List"},"isFinal":true,"name":"vertex","id":"vertex","line":"131","kind":"variable"},{"ref":{"refId":"dart.typed_data/Float32x4List","name":"Float32x4List"},"isFinal":true,"name":"m4","id":"m4","line":"168","kind":"variable"},{"ref":{"refId":"dart.typed_data/Float32x4List","name":"Float32x4List"},"isFinal":true,"name":"vertex4","id":"vertex4","line":"169","kind":"variable"},{"name":"SkinnedMesh","id":"SkinnedMesh2()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"name","id":"name","kind":"param"},{"ref":{"refId":"spectre/GraphicsDevice","name":"GraphicsDevice"},"name":"device","id":"device","kind":"param"}],"line":"70","kind":"constructor"}],"line":"63","kind":"class"},{"superclass":{"refId":"dart.core/Object","name":"Object"},"uri":"package:spectre/src/spectre/skinned_mesh.dart","name":"Animation","id":"Animation","children":[{"returnType":{"refId":"spectre/BoneAnimation","name":"BoneAnimation"},"name":"getDataForBone","id":"getDataForBone1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"boneIndex","id":"boneIndex","kind":"param"}],"line":"51","kind":"method"},{"ref":{"refId":"dart.core/double","name":"double"},"name":"runTime","id":"runTime","line":"58","kind":"property"},{"ref":{"refId":"dart.core/double","name":"double"},"name":"timeScale","id":"timeScale","line":"60","kind":"property"},{"ref":{"refId":"dart.core/String","name":"String"},"isFinal":true,"name":"name","id":"name","line":"46","kind":"variable"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"spectre/BoneAnimation","name":"BoneAnimation"}],"name":"List"},"isFinal":true,"name":"_boneData","isPrivate":true,"id":"_boneData","line":"47","kind":"variable"},{"ref":{"refId":"dart.core/double","name":"double"},"name":"_runTime","isPrivate":true,"id":"_runTime","line":"57","kind":"variable"},{"ref":{"refId":"dart.core/double","name":"double"},"name":"_timeScale","isPrivate":true,"id":"_timeScale","line":"59","kind":"variable"},{"name":"Animation","id":"Animation2()","children":[{"initializedField":{"refId":"spectre/Animation/name","name":"name"},"ref":{"refId":"dart.core/String","name":"String"},"name":"name","id":"name","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"length","id":"length","kind":"param"}],"line":"48","kind":"constructor"}],"line":"45","kind":"class"},{"superclass":{"refId":"dart.core/Object","name":"Object"},"uri":"package:spectre/src/spectre/skinned_mesh.dart","name":"Float32ListHelpers","id":"Float32ListHelpers","children":[{"returnType":{"refId":"void","name":"void"},"isStatic":true,"name":"addScale44","id":"addScale443()","children":[{"name":"out","id":"out","kind":"param"},{"name":"input","id":"input","kind":"param"},{"name":"scale","id":"scale","kind":"param"}],"line":"24","kind":"method"}],"line":"23","kind":"class"},{"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"Key frame animation data for an entire skeleton.","uri":"package:spectre/src/spectre/skeleton_animation.dart","name":"SkeletonAnimation","id":"SkeletonAnimation","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"name":"boneHasAnimation","id":"boneHasAnimation1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"boneName","id":"boneName","kind":"param"}],"line":"307","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Animates [skeleton] to time [t] and updates [posedSkeleton].","name":"poseSkeleton","id":"poseSkeleton3()","children":[{"ref":{"refId":"dart.core/double","name":"double"},"name":"t","id":"t","kind":"param"},{"ref":{"refId":"spectre/Skeleton","name":"Skeleton"},"name":"skeleton","id":"skeleton","kind":"param"},{"ref":{"refId":"spectre/PosedSkeleton","name":"PosedSkeleton"},"name":"posedSkeleton","id":"posedSkeleton","kind":"param"}],"line":"312","kind":"method"},{"ref":{"refId":"dart.core/String","name":"String"},"isFinal":true,"name":"name","id":"name","line":"297","kind":"variable"},{"ref":{"refId":"dart.core/Map","arguments":[{"refId":"dart.core/String","name":"String"},{"refId":"spectre/BoneAnimation","name":"BoneAnimation"}],"name":"Map"},"isFinal":true,"name":"boneAnimations","id":"boneAnimations","line":"298","kind":"variable"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"spectre/BoneAnimation","name":"BoneAnimation"}],"name":"List"},"isFinal":true,"name":"boneList","id":"boneList","line":"300","kind":"variable"},{"ref":{"refId":"dart.core/double","name":"double"},"name":"runTime","id":"runTime","line":"304","kind":"variable"},{"ref":{"refId":"dart.core/double","name":"double"},"name":"timeScale","id":"timeScale","line":"305","kind":"variable"},{"name":"SkeletonAnimation","id":"SkeletonAnimation2()","children":[{"initializedField":{"refId":"spectre/SkeletonAnimation/name","name":"name"},"ref":{"refId":"dart.core/String","name":"String"},"name":"name","id":"name","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"length","id":"length","kind":"param"}],"line":"301","kind":"constructor"}],"line":"296","kind":"class"},{"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"Key frame animation data for a single bone in a skeleton.","uri":"package:spectre/src/spectre/skeleton_animation.dart","name":"BoneAnimation","id":"BoneAnimation","children":[{"returnType":{"refId":"void","name":"void"},"comment":"Makes bone have no position animation.","name":"setNoPositionAnimation","id":"setNoPositionAnimation0()","line":"72","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Makes room for [length] position animation frames.\nAll position animation frames will be zero.","name":"setPositionAnimationLength","id":"setPositionAnimationLength1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"length","id":"length","kind":"param"}],"line":"84","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Builds bone animation data from key frames in [positions].","name":"updatePositions","id":"updatePositions1()","children":[{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/Map","name":"Map"}],"name":"List"},"name":"positions","id":"positions","kind":"param"}],"line":"95","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Makes bone have no rotation animation.","name":"setNoRotationAnimation","id":"setNoRotationAnimation0()","line":"112","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Makes room for [length] rotation animation frames.\nAll rotation animation frames will be zero.","name":"setRotationAnimationLength","id":"setRotationAnimationLength1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"length","id":"length","kind":"param"}],"line":"124","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Builds bone animation data from key frames in [rotations].","name":"updateRotations","id":"updateRotations1()","children":[{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/Map","name":"Map"}],"name":"List"},"name":"rotations","id":"rotations","kind":"param"}],"line":"135","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Makes bone have no scale animation.","name":"setNoScaleAnimation","id":"setNoScaleAnimation0()","line":"152","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Makes room for [length] scale animation frames.\nAll scale animation frames will be zero.","name":"setScaleAnimationLength","id":"setScaleAnimationLength1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"length","id":"length","kind":"param"}],"line":"164","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Builds bone animation data from key frames in [scales].","name":"updateScales","id":"updateScales1()","children":[{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/Map","name":"Map"}],"name":"List"},"name":"scales","id":"scales","kind":"param"}],"line":"175","kind":"method"},{"returnType":{"refId":"dart.core/int","name":"int"},"name":"_findTime","isPrivate":true,"id":"_findTime2()","children":[{"ref":{"refId":"dart.typed_data/Float32List","name":"Float32List"},"name":"timeList","id":"timeList","kind":"param"},{"ref":{"refId":"dart.core/double","name":"double"},"name":"t","id":"t","kind":"param"}],"line":"191","kind":"method"},{"returnType":{"refId":"dart.core/int","name":"int"},"name":"_findPositionIndex","isPrivate":true,"id":"_findPositionIndex1()","children":[{"ref":{"refId":"dart.core/double","name":"double"},"name":"t","id":"t","kind":"param"}],"line":"200","kind":"method"},{"returnType":{"refId":"dart.core/int","name":"int"},"name":"_findScaleIndex","isPrivate":true,"id":"_findScaleIndex1()","children":[{"ref":{"refId":"dart.core/double","name":"double"},"name":"t","id":"t","kind":"param"}],"line":"204","kind":"method"},{"returnType":{"refId":"dart.core/int","name":"int"},"name":"_findRotationIndex","isPrivate":true,"id":"_findRotationIndex1()","children":[{"ref":{"refId":"dart.core/double","name":"double"},"name":"t","id":"t","kind":"param"}],"line":"208","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"buildTransformMatricesAtTime","id":"buildTransformMatricesAtTime1()","children":[{"ref":{"refId":"dart.core/double","name":"double"},"name":"t","id":"t","kind":"param"}],"line":"212","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Set [boneMatrix] to correspond to bone animation at time [t].\nDoes not interpolate between key frames.","name":"setBoneMatrixAtTime","id":"setBoneMatrixAtTime2()","children":[{"ref":{"refId":"dart.core/double","name":"double"},"name":"t","id":"t","kind":"param"},{"ref":{"refId":"dart.typed_data/Float32List","name":"Float32List"},"name":"boneMatrix","id":"boneMatrix","kind":"param"}],"line":"269","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Set [boneMatrix] to correspond to bone animation at time [t].\nDoes not interpolate between key frames.","name":"setBoneMatrixAtTimeSIMD","id":"setBoneMatrixAtTimeSIMD2()","children":[{"ref":{"refId":"dart.core/double","name":"double"},"name":"t","id":"t","kind":"param"},{"ref":{"refId":"dart.typed_data/Float32x4List","name":"Float32x4List"},"name":"boneMatrix","id":"boneMatrix","kind":"param"}],"line":"279","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Set bone matrix [transform] to correspond to bone animation at time [t].\nDoes interpolate between key frames.","name":"setBoneMatrixAtTimeInterpolate","id":"setBoneMatrixAtTimeInterpolate2()","children":[{"ref":{"refId":"dart.core/double","name":"double"},"name":"t","id":"t","kind":"param"},{"ref":{"refId":"dart.typed_data/Float32List","name":"Float32List"},"name":"transform","id":"transform","kind":"param"}],"line":"290","kind":"method"},{"ref":{"refId":"dart.typed_data/Float32List","name":"Float32List"},"name":"positionTimes","id":"positionTimes","line":"28","kind":"property"},{"ref":{"refId":"dart.typed_data/Float32List","name":"Float32List"},"name":"positionValues","id":"positionValues","line":"29","kind":"property"},{"ref":{"refId":"dart.typed_data/Float32List","name":"Float32List"},"name":"rotationTimes","id":"rotationTimes","line":"30","kind":"property"},{"ref":{"refId":"dart.typed_data/Float32List","name":"Float32List"},"name":"rotationValues","id":"rotationValues","line":"31","kind":"property"},{"ref":{"refId":"dart.typed_data/Float32List","name":"Float32List"},"name":"scaleTimes","id":"scaleTimes","line":"32","kind":"property"},{"ref":{"refId":"dart.typed_data/Float32List","name":"Float32List"},"name":"scaleValues","id":"scaleValues","line":"33","kind":"property"},{"ref":{"refId":"dart.core/String","name":"String"},"isFinal":true,"name":"boneName","id":"boneName","line":"25","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isFinal":true,"name":"boneIndex","id":"boneIndex","line":"26","kind":"variable"},{"ref":{"refId":"dart.typed_data/Float32List","name":"Float32List"},"name":"_positionTimes","isPrivate":true,"id":"_positionTimes","line":"35","kind":"variable"},{"ref":{"refId":"dart.typed_data/Float32List","name":"Float32List"},"name":"_positionValues","isPrivate":true,"id":"_positionValues","line":"36","kind":"variable"},{"ref":{"refId":"dart.typed_data/Float32List","name":"Float32List"},"name":"_rotationTimes","isPrivate":true,"id":"_rotationTimes","line":"37","kind":"variable"},{"ref":{"refId":"dart.typed_data/Float32List","name":"Float32List"},"name":"_rotationValues","isPrivate":true,"id":"_rotationValues","line":"38","kind":"variable"},{"ref":{"refId":"dart.typed_data/Float32List","name":"Float32List"},"name":"_scaleTimes","isPrivate":true,"id":"_scaleTimes","line":"39","kind":"variable"},{"ref":{"refId":"dart.typed_data/Float32List","name":"Float32List"},"name":"_scaleValues","isPrivate":true,"id":"_scaleValues","line":"40","kind":"variable"},{"ref":{"refId":"dart.typed_data/Float32x4List","name":"Float32x4List"},"name":"positionValues4","id":"positionValues4","line":"42","kind":"variable"},{"ref":{"refId":"dart.typed_data/Float32x4List","name":"Float32x4List"},"name":"rotationValues4","id":"rotationValues4","line":"43","kind":"variable"},{"ref":{"refId":"dart.typed_data/Float32x4List","name":"Float32x4List"},"name":"scaleValues4","id":"scaleValues4","line":"44","kind":"variable"},{"ref":{"refId":"dart.typed_data/Float32List","name":"Float32List"},"isFinal":true,"name":"_positionMatrix","isPrivate":true,"id":"_positionMatrix","line":"46","kind":"variable"},{"ref":{"refId":"dart.typed_data/Float32List","name":"Float32List"},"isFinal":true,"name":"_rotationMatrix","isPrivate":true,"id":"_rotationMatrix","line":"47","kind":"variable"},{"ref":{"refId":"dart.typed_data/Float32List","name":"Float32List"},"isFinal":true,"name":"_scaleMatrix","isPrivate":true,"id":"_scaleMatrix","line":"48","kind":"variable"},{"ref":{"refId":"dart.typed_data/Float32x4List","name":"Float32x4List"},"name":"_positionMatrix4","isPrivate":true,"id":"_positionMatrix4","line":"50","kind":"variable"},{"ref":{"refId":"dart.typed_data/Float32x4List","name":"Float32x4List"},"name":"_rotationMatrix4","isPrivate":true,"id":"_rotationMatrix4","line":"51","kind":"variable"},{"ref":{"refId":"dart.typed_data/Float32x4List","name":"Float32x4List"},"name":"_scaleMatrix4","isPrivate":true,"id":"_scaleMatrix4","line":"52","kind":"variable"},{"comment":"Construct bone animation with [boneName]. Animation key frames\nwill be loaded from [positions], [rotations], and [scales].","name":"BoneAnimation","id":"BoneAnimation5()","children":[{"initializedField":{"refId":"spectre/BoneAnimation/boneName","name":"boneName"},"ref":{"refId":"dart.core/String","name":"String"},"name":"boneName","id":"boneName","kind":"param"},{"initializedField":{"refId":"spectre/BoneAnimation/boneIndex","name":"boneIndex"},"ref":{"refId":"dart.core/int","name":"int"},"name":"boneIndex","id":"boneIndex","kind":"param"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/Map","name":"Map"}],"name":"List"},"name":"positions","id":"positions","kind":"param"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/Map","name":"Map"}],"name":"List"},"name":"rotations","id":"rotations","line":"57","kind":"param"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/Map","name":"Map"}],"name":"List"},"name":"scales","id":"scales","line":"57","kind":"param"}],"line":"56","kind":"constructor"}],"kind":"class"},{"interfaces":[{"refId":"spectre/SkeletonPoser","name":"SkeletonPoser"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"uri":"package:spectre/src/spectre/skeleton.dart","name":"SIMDSkeletonPoser","id":"SIMDSkeletonPoser","children":[{"returnType":{"refId":"void","name":"void"},"name":"mul44SIMD","id":"mul44SIMD3()","children":[{"ref":{"refId":"dart.typed_data/Float32x4List","name":"Float32x4List"},"name":"out","id":"out","kind":"param"},{"ref":{"refId":"dart.typed_data/Float32x4List","name":"Float32x4List"},"name":"a","id":"a","kind":"param"},{"ref":{"refId":"dart.typed_data/Float32x4List","name":"Float32x4List"},"name":"b","id":"b","kind":"param"}],"line":"204","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"updateGlobalTransform","id":"updateGlobalTransform5()","children":[{"ref":{"refId":"spectre/Bone","name":"Bone"},"name":"bone","id":"bone","line":"215","kind":"param"},{"ref":{"refId":"dart.typed_data/Float32x4List","name":"Float32x4List"},"name":"parentTransform","id":"parentTransform","line":"216","kind":"param"},{"ref":{"refId":"spectre/SkeletonAnimation","name":"SkeletonAnimation"},"name":"animation","id":"animation","line":"217","kind":"param"},{"ref":{"refId":"spectre/PosedSkeleton","name":"PosedSkeleton"},"name":"posedSkeleton","id":"posedSkeleton","line":"218","kind":"param"},{"ref":{"refId":"dart.core/double","name":"double"},"name":"t","id":"t","line":"219","kind":"param"}],"line":"214","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"updateSkinningTransform","id":"updateSkinningTransform2()","children":[{"ref":{"refId":"spectre/PosedSkeleton","name":"PosedSkeleton"},"name":"posedSkeleton","id":"posedSkeleton","kind":"param"},{"ref":{"refId":"spectre/Skeleton","name":"Skeleton"},"name":"skeleton","id":"skeleton","kind":"param"}],"line":"240","kind":"method"},{"name":"pose","id":"pose4()","children":[{"ref":{"refId":"spectre/Skeleton","name":"Skeleton"},"name":"skeleton","id":"skeleton","kind":"param"},{"ref":{"refId":"spectre/SkeletonAnimation","name":"SkeletonAnimation"},"name":"animation","id":"animation","kind":"param"},{"ref":{"refId":"spectre/PosedSkeleton","name":"PosedSkeleton"},"name":"posedSkeleton","id":"posedSkeleton","line":"252","kind":"param"},{"ref":{"refId":"dart.core/double","name":"double"},"name":"t","id":"t","line":"252","kind":"param"}],"line":"251","kind":"method"},{"ref":{"refId":"dart.typed_data/Float32x4List","name":"Float32x4List"},"isFinal":true,"name":"_scratchMatrix","isPrivate":true,"id":"_scratchMatrix","line":"202","kind":"variable"}],"line":"201","kind":"class"},{"interfaces":[{"refId":"spectre/SkeletonPoser","name":"SkeletonPoser"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"uri":"package:spectre/src/spectre/skeleton.dart","name":"SimpleSkeletonPoser","id":"SimpleSkeletonPoser","children":[{"returnType":{"refId":"void","name":"void"},"name":"mul44","id":"mul443()","children":[{"ref":{"refId":"dart.typed_data/Float32List","name":"Float32List"},"name":"out","id":"out","kind":"param"},{"ref":{"refId":"dart.typed_data/Float32List","name":"Float32List"},"name":"a","id":"a","kind":"param"},{"ref":{"refId":"dart.typed_data/Float32List","name":"Float32List"},"name":"b","id":"b","kind":"param"}],"line":"120","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"updateGlobalTransform","id":"updateGlobalTransform5()","children":[{"ref":{"refId":"spectre/Bone","name":"Bone"},"name":"bone","id":"bone","line":"152","kind":"param"},{"ref":{"refId":"dart.typed_data/Float32List","name":"Float32List"},"name":"parentTransform","id":"parentTransform","line":"153","kind":"param"},{"ref":{"refId":"spectre/SkeletonAnimation","name":"SkeletonAnimation"},"name":"animation","id":"animation","line":"154","kind":"param"},{"ref":{"refId":"spectre/PosedSkeleton","name":"PosedSkeleton"},"name":"posedSkeleton","id":"posedSkeleton","line":"155","kind":"param"},{"ref":{"refId":"dart.core/double","name":"double"},"name":"t","id":"t","line":"156","kind":"param"}],"line":"151","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"updateSkinningTransform","id":"updateSkinningTransform2()","children":[{"ref":{"refId":"spectre/PosedSkeleton","name":"PosedSkeleton"},"name":"posedSkeleton","id":"posedSkeleton","kind":"param"},{"ref":{"refId":"spectre/Skeleton","name":"Skeleton"},"name":"skeleton","id":"skeleton","kind":"param"}],"line":"177","kind":"method"},{"name":"pose","id":"pose4()","children":[{"ref":{"refId":"spectre/Skeleton","name":"Skeleton"},"name":"skeleton","id":"skeleton","kind":"param"},{"ref":{"refId":"spectre/SkeletonAnimation","name":"SkeletonAnimation"},"name":"animation","id":"animation","kind":"param"},{"ref":{"refId":"spectre/PosedSkeleton","name":"PosedSkeleton"},"name":"posedSkeleton","id":"posedSkeleton","line":"189","kind":"param"},{"ref":{"refId":"dart.core/double","name":"double"},"name":"t","id":"t","line":"189","kind":"param"}],"line":"188","kind":"method"},{"ref":{"refId":"dart.typed_data/Float32List","name":"Float32List"},"isFinal":true,"name":"_scratchMatrix","isPrivate":true,"id":"_scratchMatrix","line":"118","kind":"variable"}],"line":"117","kind":"class"},{"isAbstract":true,"superclass":{"refId":"dart.core/Object","name":"Object"},"uri":"package:spectre/src/spectre/skeleton.dart","name":"SkeletonPoser","id":"SkeletonPoser","children":[{"comment":"Poses [skeleton] using [animation] at time [t]. Posed skeleton\nis stored in [posedSkeleton].","name":"pose","id":"pose4()","children":[{"ref":{"refId":"spectre/Skeleton","name":"Skeleton"},"name":"skeleton","id":"skeleton","kind":"param"},{"ref":{"refId":"spectre/SkeletonAnimation","name":"SkeletonAnimation"},"name":"animation","id":"animation","kind":"param"},{"ref":{"refId":"spectre/PosedSkeleton","name":"PosedSkeleton"},"name":"posedSkeleton","id":"posedSkeleton","line":"114","kind":"param"},{"ref":{"refId":"dart.core/double","name":"double"},"name":"t","id":"t","line":"114","kind":"param"}],"line":"113","kind":"method"}],"line":"110","kind":"class"},{"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"Skeleton ready to be used for skinning.","uri":"package:spectre/src/spectre/skeleton.dart","name":"PosedSkeleton","id":"PosedSkeleton","children":[{"ref":{"refId":"spectre/Skeleton","name":"Skeleton"},"isFinal":true,"name":"skeleton","id":"skeleton","line":"84","kind":"variable"},{"ref":{"refId":"dart.typed_data/Float32List","name":"Float32List"},"isFinal":true,"name":"skinningMatrices","id":"skinningMatrices","line":"85","kind":"variable"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.typed_data/Float32List","name":"Float32List"}],"name":"List"},"isFinal":true,"name":"globalTransforms","id":"globalTransforms","line":"86","kind":"variable"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.typed_data/Float32List","name":"Float32List"}],"name":"List"},"isFinal":true,"name":"skinningTransforms","id":"skinningTransforms","line":"87","kind":"variable"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.typed_data/Float32x4List","name":"Float32x4List"}],"name":"List"},"isFinal":true,"name":"globalTransforms4","id":"globalTransforms4","line":"88","kind":"variable"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.typed_data/Float32x4List","name":"Float32x4List"}],"name":"List"},"isFinal":true,"name":"skinningTransforms4","id":"skinningTransforms4","line":"89","kind":"variable"},{"name":"PosedSkeleton._internal","isPrivate":true,"id":"PosedSkeleton._internal2()","children":[{"initializedField":{"refId":"spectre/PosedSkeleton/skeleton","name":"skeleton"},"ref":{"refId":"spectre/Skeleton","name":"Skeleton"},"name":"skeleton","id":"skeleton","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"length","id":"length","kind":"param"}],"line":"91","kind":"constructor"},{"returnType":{"refId":"spectre/PosedSkeleton","name":"PosedSkeleton"},"name":"PosedSkeleton","id":"PosedSkeleton1()","children":[{"ref":{"refId":"spectre/Skeleton","name":"Skeleton"},"name":"skeleton","id":"skeleton","kind":"param"}],"line":"105","kind":"constructor"}],"line":"83","kind":"class"},{"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"Skeleton.","uri":"package:spectre/src/spectre/skeleton.dart","name":"Skeleton","id":"Skeleton","children":[{"ref":{"refId":"dart.core/String","name":"String"},"isFinal":true,"name":"name","id":"name","line":"71","kind":"variable"},{"ref":{"refId":"dart.typed_data/Float32List","name":"Float32List"},"isFinal":true,"name":"globalOffsetTransform","id":"globalOffsetTransform","line":"72","kind":"variable"},{"ref":{"refId":"dart.typed_data/Float32x4List","name":"Float32x4List"},"name":"globalOffsetTransform4","id":"globalOffsetTransform4","line":"73","kind":"variable"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"spectre/Bone","name":"Bone"}],"name":"List"},"isFinal":true,"name":"boneList","id":"boneList","line":"74","kind":"variable"},{"ref":{"refId":"dart.core/Map","arguments":[{"refId":"dart.core/String","name":"String"},{"refId":"spectre/Bone","name":"Bone"}],"name":"Map"},"isFinal":true,"name":"bones","id":"bones","line":"75","kind":"variable"},{"name":"Skeleton","id":"Skeleton2()","children":[{"initializedField":{"refId":"spectre/Skeleton/name","name":"name"},"ref":{"refId":"dart.core/String","name":"String"},"name":"name","id":"name","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"length","id":"length","kind":"param"}],"line":"76","kind":"constructor"}],"line":"70","kind":"class"},{"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"Bone.","uri":"package:spectre/src/spectre/skeleton.dart","name":"Bone","id":"Bone","children":[{"isSetter":true,"name":"parent=","id":"parent=1()","children":[{"ref":{"refId":"spectre/Bone","name":"Bone"},"name":"parent","id":"parent","kind":"param"}],"line":"64","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"boneIndex","id":"boneIndex","line":"60","kind":"property"},{"ref":{"refId":"spectre/Bone","name":"Bone"},"comment":"Parent bone.","name":"parent","id":"parent","line":"63","kind":"property"},{"ref":{"refId":"dart.core/String","name":"String"},"isFinal":true,"name":"boneName","id":"boneName","line":"25","kind":"variable"},{"ref":{"refId":"dart.typed_data/Float32List","name":"Float32List"},"isFinal":true,"name":"localTransform","id":"localTransform","line":"26","kind":"variable"},{"ref":{"refId":"dart.typed_data/Float32List","name":"Float32List"},"isFinal":true,"name":"offsetTransform","id":"offsetTransform","line":"27","kind":"variable"},{"ref":{"refId":"dart.typed_data/Float32x4List","name":"Float32x4List"},"name":"localTransform4","id":"localTransform4","line":"28","kind":"variable"},{"ref":{"refId":"dart.typed_data/Float32x4List","name":"Float32x4List"},"name":"offsetTransform4","id":"offsetTransform4","line":"29","kind":"variable"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"spectre/Bone","name":"Bone"}],"name":"List"},"isFinal":true,"name":"children","id":"children","line":"30","kind":"variable"},{"ref":{"refId":"spectre/Bone","name":"Bone"},"name":"_parent","isPrivate":true,"id":"_parent","line":"31","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"_boneIndex","isPrivate":true,"id":"_boneIndex","line":"32","kind":"variable"},{"name":"Bone","id":"Bone3()","children":[{"initializedField":{"refId":"spectre/Bone/boneName","name":"boneName"},"ref":{"refId":"dart.core/String","name":"String"},"name":"boneName","id":"boneName","kind":"param"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/num","name":"num"}],"name":"List"},"name":"local","id":"local","kind":"param"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/num","name":"num"}],"name":"List"},"name":"offset","id":"offset","kind":"param"}],"line":"34","kind":"constructor"}],"kind":"class"},{"superclass":{"refId":"spectre/SpectreMesh","name":"SpectreMesh"},"uri":"package:spectre/src/spectre/mesh.dart","name":"SingleArrayIndexedMesh","id":"SingleArrayIndexedMesh","children":[{"returnType":{"refId":"void","name":"void"},"name":"finalize","id":"finalize0()","line":"71","kind":"method"},{"ref":{"refId":"spectre/IndexBuffer","name":"IndexBuffer"},"name":"indexArray","id":"indexArray","line":"62","kind":"property"},{"ref":{"refId":"spectre/VertexBuffer","name":"VertexBuffer"},"name":"vertexArray","id":"vertexArray","line":"63","kind":"property"},{"ref":{"refId":"spectre/VertexBuffer","name":"VertexBuffer"},"name":"_deviceVertexBuffer","isPrivate":true,"id":"_deviceVertexBuffer","line":"60","kind":"variable"},{"ref":{"refId":"spectre/IndexBuffer","name":"IndexBuffer"},"name":"_deviceIndexBuffer","isPrivate":true,"id":"_deviceIndexBuffer","line":"61","kind":"variable"},{"name":"SingleArrayIndexedMesh","id":"SingleArrayIndexedMesh2()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"name","id":"name","kind":"param"},{"ref":{"refId":"spectre/GraphicsDevice","name":"GraphicsDevice"},"name":"device","id":"device","kind":"param"}],"line":"65","kind":"constructor"}],"line":"59","kind":"class"},{"superclass":{"refId":"spectre/SpectreMesh","name":"SpectreMesh"},"uri":"package:spectre/src/spectre/mesh.dart","name":"SingleArrayMesh","id":"SingleArrayMesh","children":[{"returnType":{"refId":"void","name":"void"},"name":"finalize","id":"finalize0()","line":"51","kind":"method"},{"ref":{"refId":"spectre/VertexBuffer","name":"VertexBuffer"},"name":"vertexArray","id":"vertexArray","line":"45","kind":"property"},{"ref":{"refId":"spectre/VertexBuffer","name":"VertexBuffer"},"name":"_deviceVertexBuffer","isPrivate":true,"id":"_deviceVertexBuffer","line":"44","kind":"variable"},{"name":"SingleArrayMesh","id":"SingleArrayMesh2()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"name","id":"name","kind":"param"},{"ref":{"refId":"spectre/GraphicsDevice","name":"GraphicsDevice"},"name":"device","id":"device","kind":"param"}],"line":"47","kind":"constructor"}],"line":"43","kind":"class"},{"isAbstract":true,"superclass":{"refId":"spectre/DeviceChild","name":"DeviceChild"},"uri":"package:spectre/src/spectre/mesh.dart","name":"SpectreMesh","id":"SpectreMesh","children":[{"returnType":{"refId":"void","name":"void"},"name":"finalize","id":"finalize0()","line":"38","kind":"method"},{"ref":{"refId":"dart.core/Map","arguments":[{"refId":"dart.core/String","name":"String"},{"refId":"spectre/SpectreMeshAttribute","name":"SpectreMeshAttribute"}],"name":"Map"},"isFinal":true,"name":"attributes","id":"attributes","line":"32","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"count","id":"count","line":"34","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"primitiveTopology","id":"primitiveTopology","line":"35","kind":"variable"},{"name":"SpectreMesh","id":"SpectreMesh2()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"name","id":"name","kind":"param"},{"ref":{"refId":"spectre/GraphicsDevice","name":"GraphicsDevice"},"name":"device","id":"device","kind":"param"}],"line":"36","kind":"constructor"}],"line":"31","kind":"class"},{"superclass":{"refId":"dart.core/Object","name":"Object"},"uri":"package:spectre/src/spectre/mesh.dart","name":"SpectreMeshAttribute","id":"SpectreMeshAttribute","children":[{"returnType":{"refId":"dart.core/String","name":"String"},"name":"toString","id":"toString0()","line":"28","kind":"method"},{"ref":{"refId":"dart.core/String","name":"String"},"isFinal":true,"name":"name","id":"name","line":"24","kind":"variable"},{"ref":{"refId":"spectre/VertexAttribute","name":"VertexAttribute"},"isFinal":true,"name":"attribute","id":"attribute","line":"25","kind":"variable"},{"name":"SpectreMeshAttribute","id":"SpectreMeshAttribute2()","children":[{"initializedField":{"refId":"spectre/SpectreMeshAttribute/name","name":"name"},"ref":{"refId":"dart.core/String","name":"String"},"name":"name","id":"name","kind":"param"},{"initializedField":{"refId":"spectre/SpectreMeshAttribute/attribute","name":"attribute"},"ref":{"refId":"spectre/VertexAttribute","name":"VertexAttribute"},"name":"attribute","id":"attribute","kind":"param"}],"line":"26","kind":"constructor"}],"line":"23","kind":"class"},{"superclass":{"refId":"spectre/DeviceChild","name":"DeviceChild"},"comment":"The window dimensions of a render-target surface onto which a 3D\nvolume projects.\nSet using [GraphicsContext.setViewport]","uri":"package:spectre/src/spectre/viewport.dart","name":"Viewport","id":"Viewport","children":[{"isSetter":true,"name":"x=","id":"x=1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"value","id":"value","kind":"param"}],"line":"84","kind":"method"},{"isSetter":true,"name":"y=","id":"y=1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"value","id":"value","kind":"param"}],"line":"89","kind":"method"},{"isSetter":true,"comment":"The width of the viewport on the render-target surface, in pixels.\nThrows [ArgumentError] if [value] is not a positive number.","name":"width=","id":"width=1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"value","id":"value","kind":"param"}],"line":"93","kind":"method"},{"isSetter":true,"comment":"The height of the viewport on the render-target surface, in pixels.\nThrows [ArgumentError] if [value] is not a positive number.","name":"height=","id":"height=1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"value","id":"value","kind":"param"}],"line":"104","kind":"method"},{"isSetter":true,"comment":"The minimum depth of the viewport.\nThrows [ArgumentError] if [value] is not in the range [0, 1].","name":"minDepth=","id":"minDepth=1()","children":[{"ref":{"refId":"dart.core/double","name":"double"},"name":"value","id":"value","kind":"param"}],"line":"115","kind":"method"},{"isSetter":true,"comment":"The maximum depth of the viewport.\nThrows [ArgumentError] if [value] is not in the range [0, 1].","name":"maxDepth=","id":"maxDepth=1()","children":[{"ref":{"refId":"dart.core/double","name":"double"},"name":"value","id":"value","kind":"param"}],"line":"131","kind":"method"},{"comment":"Serializes the [RasterizerState] to a JSON.","name":"toJson","id":"toJson0()","line":"146","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Deserializes the [RasterizerState] from a JSON.","name":"fromJson","id":"fromJson1()","children":[{"name":"values","id":"values","kind":"param"}],"line":"162","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"The x-coordinate of the upper left corner of the viewport on the\nrender-target surface.","name":"x","id":"x","line":"83","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"The y-coordinate of the upper left corner of the viewport on the\nrender-target surface.","name":"y","id":"y","line":"88","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"width","id":"width","line":"100","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"height","id":"height","line":"111","kind":"property"},{"ref":{"refId":"dart.core/double","name":"double"},"name":"minDepth","id":"minDepth","line":"123","kind":"property"},{"ref":{"refId":"dart.core/double","name":"double"},"comment":"The aspect ratio used by the viewport.","name":"aspectRatio","id":"aspectRatio","line":"127","kind":"property"},{"ref":{"refId":"dart.core/double","name":"double"},"name":"maxDepth","id":"maxDepth","line":"139","kind":"property"},{"ref":{"refId":"dart.core/String","name":"String"},"isStatic":true,"comment":"Serialization name for [x].","name":"_xName","isPrivate":true,"id":"_xName","line":"32","kind":"variable"},{"ref":{"refId":"dart.core/String","name":"String"},"isStatic":true,"comment":"Serialization name for [y].","name":"_yName","isPrivate":true,"id":"_yName","line":"34","kind":"variable"},{"ref":{"refId":"dart.core/String","name":"String"},"isStatic":true,"comment":"Serialization name for [width].","name":"_widthName","isPrivate":true,"id":"_widthName","line":"36","kind":"variable"},{"ref":{"refId":"dart.core/String","name":"String"},"isStatic":true,"comment":"Serialization name for [height].","name":"_heightName","isPrivate":true,"id":"_heightName","line":"38","kind":"variable"},{"ref":{"refId":"dart.core/String","name":"String"},"isStatic":true,"comment":"Serialization name for [minDepth].","name":"_minDepthName","isPrivate":true,"id":"_minDepthName","line":"40","kind":"variable"},{"ref":{"refId":"dart.core/String","name":"String"},"isStatic":true,"comment":"Serialization name for [maxDepth].","name":"_maxDepthName","isPrivate":true,"id":"_maxDepthName","line":"42","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"The x-coordinate of the upper left corner of the viewport on the\nrender-target surface.","name":"_x","isPrivate":true,"id":"_x","line":"50","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"The y-coordinate of the upper left corner of the viewport on the\nrender-target surface.","name":"_y","isPrivate":true,"id":"_y","line":"53","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"The width of the viewport on the render-target surface, in pixels.","name":"_width","isPrivate":true,"id":"_width","line":"55","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"The height of the viewport on the render-target surface, in pixels.","name":"_height","isPrivate":true,"id":"_height","line":"57","kind":"variable"},{"ref":{"refId":"dart.core/double","name":"double"},"comment":"The minimum depth of the viewport.","name":"_minDepth","isPrivate":true,"id":"_minDepth","line":"59","kind":"variable"},{"ref":{"refId":"dart.core/double","name":"double"},"comment":"The maximum depth of the viewport.","name":"_maxDepth","isPrivate":true,"id":"_maxDepth","line":"61","kind":"variable"},{"comment":"Creates an instance of the [Viewport] class.","name":"Viewport","id":"Viewport2()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"name","id":"name","kind":"param"},{"ref":{"refId":"spectre/GraphicsDevice","name":"GraphicsDevice"},"name":"device","id":"device","kind":"param"}],"line":"68","kind":"constructor"},{"comment":"Creates an instance of the [Viewport] class.\nThe rectangular bounding box is specified.","name":"Viewport.bounds","id":"Viewport.bounds6()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"name","id":"name","kind":"param"},{"ref":{"refId":"spectre/GraphicsDevice","name":"GraphicsDevice"},"name":"device","id":"device","kind":"param"},{"initializedField":{"refId":"spectre/Viewport/_x","name":"_x"},"ref":{"refId":"dart.core/int","name":"int"},"name":"_x","isPrivate":true,"id":"_x","kind":"param"},{"initializedField":{"refId":"spectre/Viewport/_y","name":"_y"},"ref":{"refId":"dart.core/int","name":"int"},"name":"_y","isPrivate":true,"id":"_y","kind":"param"},{"initializedField":{"refId":"spectre/Viewport/_width","name":"_width"},"ref":{"refId":"dart.core/int","name":"int"},"name":"_width","isPrivate":true,"id":"_width","line":"74","kind":"param"},{"initializedField":{"refId":"spectre/Viewport/_height","name":"_height"},"ref":{"refId":"dart.core/int","name":"int"},"name":"_height","isPrivate":true,"id":"_height","line":"74","kind":"param"}],"line":"73","kind":"constructor"}],"line":"26","kind":"class"},{"superclass":{"refId":"spectre/SpectreShader","name":"SpectreShader"},"comment":"VertexShader","uri":"package:spectre/src/spectre/vertex_shader.dart","name":"VertexShader","id":"VertexShader","children":[{"name":"VertexShader","id":"VertexShader2()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"name","id":"name","kind":"param"},{"ref":{"refId":"spectre/GraphicsDevice","name":"GraphicsDevice"},"name":"device","id":"device","kind":"param"}],"line":"25","kind":"constructor"}],"kind":"class"},{"superclass":{"refId":"spectre/SpectreBuffer","name":"SpectreBuffer"},"comment":"Defines storage for vertex data","uri":"package:spectre/src/spectre/vertex_buffer.dart","name":"VertexBuffer","id":"VertexBuffer","children":[{"name":"VertexBuffer","id":"VertexBuffer2()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"name","id":"name","kind":"param"},{"ref":{"refId":"spectre/GraphicsDevice","name":"GraphicsDevice"},"name":"device","id":"device","kind":"param"}],"line":"25","kind":"constructor"}],"kind":"class"},{"superclass":{"refId":"spectre/Enum","name":"Enum"},"comment":"Buffer usage pattern.","uri":"package:spectre/src/spectre/usage_pattern.dart","name":"UsagePattern","id":"UsagePattern","children":[{"returnType":{"refId":"dart.core/int","name":"int"},"isStatic":true,"comment":"Convert a [String] to a [UsagePattern].","name":"parse","id":"parse1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"name","id":"name","kind":"param"}],"line":"39","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"isStatic":true,"comment":"Convert a [UsagePattern] to a [String].","name":"stringify","id":"stringify1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"value","id":"value","kind":"param"}],"line":"41","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"isStatic":true,"comment":"Checks whether the value is a valid enumeration.","name":"isValid","id":"isValid1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"value","id":"value","kind":"param"}],"line":"43","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"comment":"Modified once. Few uses.","name":"StreamDraw","id":"StreamDraw","line":"26","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"comment":"Modified once. Many uses.","name":"StaticDraw","id":"StaticDraw","line":"28","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"comment":"Modified repeatedly. Many uses.","name":"DynamicDraw","id":"DynamicDraw","line":"30","kind":"variable"},{"ref":{"refId":"dart.core/Map","arguments":[{"refId":"dart.core/String","name":"String"},{"refId":"dart.core/int","name":"int"}],"name":"Map"},"isStatic":true,"name":"_values","isPrivate":true,"id":"_values","line":"32","kind":"variable"}],"kind":"class"},{"superclass":{"refId":"spectre/SpectreTexture","name":"SpectreTexture"},"comment":"Texture2D defines the storage for a 2D texture including Mipmaps\nSet using [GraphicsContext.setTextures]\nNOTE: Unlike OpenGL, Spectre textures do not describe how they are sampled","uri":"package:spectre/src/spectre/texture_2d.dart","name":"Texture2D","id":"Texture2D","children":[{"returnType":{"refId":"void","name":"void"},"name":"_uploadPixelArray","isPrivate":true,"id":"_uploadPixelArray5()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"width","id":"width","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"height","id":"height","kind":"param"},{"name":"array","id":"array","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"pixelFormat","id":"pixelFormat","line":"41","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"pixelType","id":"pixelType","line":"41","kind":"param"}],"line":"40","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Replace texture contents with data stored in [array].\nIf [array] is null, space will be allocated on the GPU\n","name":"uploadPixelArray","id":"uploadPixelArray5()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"width","id":"width","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"height","id":"height","kind":"param"},{"name":"array","id":"array","kind":"param"},{"isNamed":true,"isOptional":true,"defaultValue":"SpectreTexture.FormatRGBA","name":"pixelFormat","id":"pixelFormat","line":"50","kind":"param"},{"isNamed":true,"isOptional":true,"defaultValue":"SpectreTexture.PixelTypeU8","name":"pixelType","id":"pixelType","line":"51","kind":"param"}],"line":"49","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"_uploadElement","isPrivate":true,"id":"_uploadElement3()","children":[{"name":"element","id":"element","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"pixelFormat","id":"pixelFormat","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"pixelType","id":"pixelType","kind":"param"}],"line":"59","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Replace texture contents with image data from [element].\nSupported for [ImageElement], [VideoElement], and [CanvasElement].\n\nThe image data will be converted to [pixelFormat] and [pixelType] before\nbeing uploaded to the GPU.\n","name":"uploadElement","id":"uploadElement3()","children":[{"name":"element","id":"element","kind":"param"},{"isNamed":true,"isOptional":true,"defaultValue":"SpectreTexture.FormatRGBA","name":"pixelFormat","id":"pixelFormat","line":"71","kind":"param"},{"isNamed":true,"isOptional":true,"defaultValue":"SpectreTexture.PixelTypeU8","name":"pixelType","id":"pixelType","line":"72","kind":"param"}],"line":"70","kind":"method"},{"returnType":{"refId":"dart.async/Future","arguments":[{"refId":"spectre/Texture2D","name":"Texture2D"}],"name":"Future"},"comment":"Replace texture contents with data fetched from [url].\nIf an error occurs while fetching the image, loadError will be true.\n","name":"uploadFromURL","id":"uploadFromURL3()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"url","id":"url","kind":"param"},{"isNamed":true,"isOptional":true,"defaultValue":"SpectreTexture.FormatRGBA","name":"pixelFormat","id":"pixelFormat","line":"94","kind":"param"},{"isNamed":true,"isOptional":true,"defaultValue":"SpectreTexture.PixelTypeU8","name":"pixelType","id":"pixelType","line":"95","kind":"param"}],"line":"93","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"_generateMipmap","isPrivate":true,"id":"_generateMipmap0()","line":"112","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Generate mipmaps for the [Texture2D].\n\nThis must be done before the texture is used for rendering.\n\nA call to this method will only generate mipmap data if the\ntexture is a power of two. If not then this call is ignored.","name":"generateMipmap","id":"generateMipmap0()","line":"123","kind":"method"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"Did an error occur when loading from a URL? ","name":"loadError","id":"loadError","line":"30","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"_loadError","isPrivate":true,"id":"_loadError","line":"27","kind":"variable"},{"name":"Texture2D","id":"Texture2D2()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"name","id":"name","kind":"param"},{"ref":{"refId":"spectre/GraphicsDevice","name":"GraphicsDevice"},"name":"device","id":"device","kind":"param"}],"line":"32","kind":"constructor"},{"name":"Texture2D._cube","isPrivate":true,"id":"Texture2D._cube5()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"name","id":"name","kind":"param"},{"ref":{"refId":"spectre/GraphicsDevice","name":"GraphicsDevice"},"name":"device","id":"device","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"bindTarget","id":"bindTarget","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"bindParam","id":"bindParam","line":"37","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"textureTarget","id":"textureTarget","line":"37","kind":"param"}],"line":"36","kind":"constructor"}],"line":"26","kind":"class"},{"superclass":{"refId":"spectre/Enum","name":"Enum"},"comment":"Defines filtering types for minification during texture sampling.","uri":"package:spectre/src/spectre/texture_min_filter.dart","name":"TextureMinFilter","id":"TextureMinFilter","children":[{"returnType":{"refId":"dart.core/int","name":"int"},"isStatic":true,"comment":"Convert a [String] to a [TextureMinFilter].","name":"parse","id":"parse1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"name","id":"name","kind":"param"}],"line":"36","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"isStatic":true,"comment":"Convert a [TextureMinFilter] to a [String].","name":"stringify","id":"stringify1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"value","id":"value","kind":"param"}],"line":"38","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"isStatic":true,"comment":"Checks whether the value is a valid enumeration.","name":"isValid","id":"isValid1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"value","id":"value","kind":"param"}],"line":"40","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"comment":"Use linear filtering for minification.","name":"Linear","id":"Linear","line":"26","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"comment":"Use point filtering for minification.","name":"Point","id":"Point","line":"28","kind":"variable"},{"ref":{"refId":"dart.core/Map","arguments":[{"refId":"dart.core/String","name":"String"},{"refId":"dart.core/int","name":"int"}],"name":"Map"},"isStatic":true,"name":"_values","isPrivate":true,"id":"_values","line":"30","kind":"variable"}],"kind":"class"},{"superclass":{"refId":"spectre/Enum","name":"Enum"},"comment":"Defines filtering types for magnification during texture sampling.","uri":"package:spectre/src/spectre/texture_mag_filter.dart","name":"TextureMagFilter","id":"TextureMagFilter","children":[{"returnType":{"refId":"dart.core/int","name":"int"},"isStatic":true,"comment":"Convert a [String] to a [TextureMagFilter].","name":"parse","id":"parse1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"name","id":"name","kind":"param"}],"line":"48","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"isStatic":true,"comment":"Convert a [TextureMagFilter] to a [String].","name":"stringify","id":"stringify1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"value","id":"value","kind":"param"}],"line":"50","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"isStatic":true,"comment":"Checks whether the value is a valid enumeration.","name":"isValid","id":"isValid1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"value","id":"value","kind":"param"}],"line":"52","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"comment":"Use linear filtering for magnification.","name":"Linear","id":"Linear","line":"26","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"comment":"Use point filtering for magnification.","name":"Point","id":"Point","line":"28","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"comment":"Use point filtering to expand, and point filtering between mipmap levels.","name":"PointMipPoint","id":"PointMipPoint","line":"30","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"comment":"Use point filtering to expand, and linear filtering between mipmap levels.","name":"PointMipLinear","id":"PointMipLinear","line":"32","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"comment":"Use linear filtering to expand, and point filtering between mipmap levels.","name":"LinearMipPoint","id":"LinearMipPoint","line":"34","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"comment":"Use linear filtering to expand, and linear filtering between mipmap levels.","name":"LinearMipLinear","id":"LinearMipLinear","line":"36","kind":"variable"},{"ref":{"refId":"dart.core/Map","arguments":[{"refId":"dart.core/String","name":"String"},{"refId":"dart.core/int","name":"int"}],"name":"Map"},"isStatic":true,"name":"_values","isPrivate":true,"id":"_values","line":"38","kind":"variable"}],"kind":"class"},{"superclass":{"refId":"spectre/SpectreTexture","name":"SpectreTexture"},"uri":"package:spectre/src/spectre/texture_cube.dart","name":"TextureCube","id":"TextureCube","children":[{"returnType":{"refId":"void","name":"void"},"name":"finalize","id":"finalize0()","line":"87","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"_generateMipmap","isPrivate":true,"id":"_generateMipmap0()","line":"97","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Generate Mipmap data for texture. This must be done before the texture\ncan be used for rendering.\n","name":"generateMipmap","id":"generateMipmap0()","line":"104","kind":"method"},{"ref":{"refId":"spectre/Texture2D","name":"Texture2D"},"name":"positiveX","id":"positiveX","line":"32","kind":"property"},{"ref":{"refId":"spectre/Texture2D","name":"Texture2D"},"name":"positiveY","id":"positiveY","line":"33","kind":"property"},{"ref":{"refId":"spectre/Texture2D","name":"Texture2D"},"name":"positiveZ","id":"positiveZ","line":"34","kind":"property"},{"ref":{"refId":"spectre/Texture2D","name":"Texture2D"},"name":"negativeX","id":"negativeX","line":"35","kind":"property"},{"ref":{"refId":"spectre/Texture2D","name":"Texture2D"},"name":"negativeY","id":"negativeY","line":"36","kind":"property"},{"ref":{"refId":"spectre/Texture2D","name":"Texture2D"},"name":"negativeZ","id":"negativeZ","line":"37","kind":"property"},{"ref":{"refId":"spectre/Texture2D","name":"Texture2D"},"name":"_positiveX","isPrivate":true,"id":"_positiveX","line":"24","kind":"variable"},{"ref":{"refId":"spectre/Texture2D","name":"Texture2D"},"name":"_positiveY","isPrivate":true,"id":"_positiveY","line":"25","kind":"variable"},{"ref":{"refId":"spectre/Texture2D","name":"Texture2D"},"name":"_positiveZ","isPrivate":true,"id":"_positiveZ","line":"26","kind":"variable"},{"ref":{"refId":"spectre/Texture2D","name":"Texture2D"},"name":"_negativeX","isPrivate":true,"id":"_negativeX","line":"28","kind":"variable"},{"ref":{"refId":"spectre/Texture2D","name":"Texture2D"},"name":"_negativeY","isPrivate":true,"id":"_negativeY","line":"29","kind":"variable"},{"ref":{"refId":"spectre/Texture2D","name":"Texture2D"},"name":"_negativeZ","isPrivate":true,"id":"_negativeZ","line":"30","kind":"variable"},{"name":"TextureCube","id":"TextureCube2()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"name","id":"name","kind":"param"},{"ref":{"refId":"spectre/GraphicsDevice","name":"GraphicsDevice"},"name":"device","id":"device","kind":"param"}],"line":"39","kind":"constructor"}],"line":"23","kind":"class"},{"superclass":{"refId":"spectre/Enum","name":"Enum"},"comment":"Defines modes for addressing texels using texture coordinates outside of\nthe typical range of 0.0 to 1.0.","uri":"package:spectre/src/spectre/texture_address_mode.dart","name":"TextureAddressMode","id":"TextureAddressMode","children":[{"returnType":{"refId":"dart.core/int","name":"int"},"isStatic":true,"comment":"Convert a [String] to a [TextureAddressMode].","name":"parse","id":"parse1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"name","id":"name","kind":"param"}],"line":"50","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"isStatic":true,"comment":"Convert a [TextureAddressMode] to a [String].","name":"stringify","id":"stringify1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"value","id":"value","kind":"param"}],"line":"52","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"isStatic":true,"comment":"Checks whether the value is a valid enumeration.","name":"isValid","id":"isValid1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"value","id":"value","kind":"param"}],"line":"54","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"comment":"Texture coordinates outside the range [0.0, 1.0] are set to the texture\ncolor at 0.0 or 1.0, respectively.","name":"Clamp","id":"Clamp","line":"28","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"comment":"Similar to Wrap, except that the texture is flipped at every integer\njunction.\n\nFor values between 0 and 1, for example, the texture is addressed\nnormally; between 1 and 2, the texture is\nflipped (mirrored); between 2 and 3, the texture is normal again, and so\non.","name":"Mirror","id":"Mirror","line":"36","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"comment":"Tile the texture at every integer junction.\n\nFor example, for u values between 0 and 3, the texture is repeated three\ntimes;\nno mirroring is performed.","name":"Wrap","id":"Wrap","line":"42","kind":"variable"},{"ref":{"refId":"dart.core/Map","arguments":[{"refId":"dart.core/String","name":"String"},{"refId":"dart.core/int","name":"int"}],"name":"Map"},"isStatic":true,"name":"_values","isPrivate":true,"id":"_values","line":"44","kind":"variable"}],"line":"25","kind":"class"},{"superclass":{"refId":"spectre/DeviceChild","name":"DeviceChild"},"uri":"package:spectre/src/spectre/texture.dart","name":"SpectreTexture","id":"SpectreTexture","children":[{"returnType":{"refId":"dart.core/String","name":"String"},"isStatic":true,"name":"formatToString","id":"formatToString1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"format","id":"format","kind":"param"}],"line":"30","kind":"method"},{"returnType":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"stringToFormat","id":"stringToFormat1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"format","id":"format","kind":"param"}],"line":"50","kind":"method"},{"isSetter":true,"comment":"Set the internal format used for this texture.\n\nNOTE: Will not take affect until next upload.\n","name":"textureFormat=","id":"textureFormat=1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"internalFormat","id":"internalFormat","kind":"param"}],"line":"90","kind":"method"},{"returnType":{"refId":"dart.dom.web_gl/Texture","name":"Texture"},"comment":"Bind this texture and return the previously bound texture. ","name":"_pushBind","isPrivate":true,"id":"_pushBind0()","line":"100","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Rebind [oldBind] ","name":"_popBind","isPrivate":true,"id":"_popBind1()","children":[{"ref":{"refId":"dart.dom.web_gl/Texture","name":"Texture"},"name":"oldBind","id":"oldBind","kind":"param"}],"line":"107","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"_applySampler","isPrivate":true,"id":"_applySampler1()","children":[{"ref":{"refId":"spectre/SamplerState","name":"SamplerState"},"name":"sampler","id":"sampler","kind":"param"}],"line":"117","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Binds the texture to [unit]. ","name":"_bind","isPrivate":true,"id":"_bind1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"unit","id":"unit","kind":"param"}],"line":"133","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"finalize","id":"finalize0()","line":"140","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"isStatic":true,"comment":"Determines whether a [value] is a power of two.\n\nAssumes that the given value will always be positive.","name":"_isPowerOfTwo","isPrivate":true,"id":"_isPowerOfTwo1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"value","id":"value","kind":"param"}],"line":"149","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"width","id":"width","line":"79","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"height","id":"height","line":"81","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"Retrieve the internal format used for this texture ","name":"textureFormat","id":"textureFormat","line":"84","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"FormatRGB","id":"FormatRGB","line":"26","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"FormatRGBA","id":"FormatRGBA","line":"27","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"FormatDepth","id":"FormatDepth","line":"28","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"PixelTypeU8","id":"PixelTypeU8","line":"70","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"PixelTypeU16","id":"PixelTypeU16","line":"71","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"PixelTypeU32","id":"PixelTypeU32","line":"72","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"PixelTypeS8","id":"PixelTypeS8","line":"73","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"PixelTypeS16","id":"PixelTypeS16","line":"74","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"PixelTypeS32","id":"PixelTypeS32","line":"75","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"PixelTypeFloat","id":"PixelTypeFloat","line":"76","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"_width","isPrivate":true,"id":"_width","line":"78","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"_height","isPrivate":true,"id":"_height","line":"80","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"_textureFormat","isPrivate":true,"id":"_textureFormat","line":"82","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isFinal":true,"name":"_bindTarget","isPrivate":true,"id":"_bindTarget","line":"94","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isFinal":true,"name":"_bindingParam","isPrivate":true,"id":"_bindingParam","line":"95","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isFinal":true,"name":"_textureTarget","isPrivate":true,"id":"_textureTarget","line":"96","kind":"variable"},{"ref":{"refId":"dart.dom.web_gl/Texture","name":"Texture"},"name":"_deviceTexture","isPrivate":true,"id":"_deviceTexture","line":"97","kind":"variable"},{"name":"SpectreTexture","id":"SpectreTexture5()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"name","id":"name","kind":"param"},{"ref":{"refId":"spectre/GraphicsDevice","name":"GraphicsDevice"},"name":"device","id":"device","kind":"param"},{"initializedField":{"refId":"spectre/SpectreTexture/_bindTarget","name":"_bindTarget"},"ref":{"refId":"dart.core/int","name":"int"},"name":"_bindTarget","isPrivate":true,"id":"_bindTarget","kind":"param"},{"initializedField":{"refId":"spectre/SpectreTexture/_bindingParam","name":"_bindingParam"},"ref":{"refId":"dart.core/int","name":"int"},"name":"_bindingParam","isPrivate":true,"id":"_bindingParam","line":"112","kind":"param"},{"initializedField":{"refId":"spectre/SpectreTexture/_textureTarget","name":"_textureTarget"},"ref":{"refId":"dart.core/int","name":"int"},"name":"_textureTarget","isPrivate":true,"id":"_textureTarget","line":"112","kind":"param"}],"line":"111","kind":"constructor"}],"line":"23","kind":"class"},{"superclass":{"refId":"spectre/Enum","name":"Enum"},"comment":"Defines various types of surface formats.","uri":"package:spectre/src/spectre/surface_format.dart","name":"SurfaceFormat","id":"SurfaceFormat","children":[{"returnType":{"refId":"dart.core/int","name":"int"},"isStatic":true,"comment":"Convert a [String] to a [SurfaceFormat].","name":"parse","id":"parse1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"name","id":"name","kind":"param"}],"line":"60","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"isStatic":true,"comment":"Convert a [SurfaceFormat] to a [String].","name":"stringify","id":"stringify1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"value","id":"value","kind":"param"}],"line":"62","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"isStatic":true,"comment":"Checks whether the value is a valid enumeration.","name":"isValid","id":"isValid1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"value","id":"value","kind":"param"}],"line":"64","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"isStatic":true,"comment":"Checks whether the value is a compressed format.","name":"_isCompressedFormat","isPrivate":true,"id":"_isCompressedFormat1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"value","id":"value","kind":"param"}],"line":"67","kind":"method"},{"returnType":{"refId":"dart.core/int","name":"int"},"isStatic":true,"comment":"Retrieves the internal format used by the surface.\n\nWebGL does not determine the internal format based on the surface type\nso this must be queried directly.","name":"_getInternalFormat","isPrivate":true,"id":"_getInternalFormat1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"value","id":"value","kind":"param"}],"line":"75","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"comment":"32-bit RGBA pixel format with alpha, using 8 bits per channel.\n\nUnderlying format is an unsigned byte.","name":"Rgba","id":"Rgba","line":"28","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"comment":"24-bit RGB pixel format, using 8 bits per channel.\n\nUnderlying format is an unsigned byte.","name":"Rgb","id":"Rgb","line":"32","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"comment":"DXT1 compression format.\n\nOnly available if the compressed texture s3tc extension is supported.\nAssumes the texture has no alpha component. DXT1 can support\nalpha but only 1-bit.","name":"Dxt1","id":"Dxt1","line":"39","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"comment":"DXT3 compression format.\n\nOnly available if the compressed texture s3tc extension is supported.","name":"Dxt3","id":"Dxt3","line":"44","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"comment":"DXT5 compression format.\n\nOnly available if the compressed texture s3tc extension is supported.","name":"Dxt5","id":"Dxt5","line":"49","kind":"variable"},{"ref":{"refId":"dart.core/Map","arguments":[{"refId":"dart.core/String","name":"String"},{"refId":"dart.core/int","name":"int"}],"name":"Map"},"isStatic":true,"name":"_values","isPrivate":true,"id":"_values","line":"51","kind":"variable"}],"kind":"class"},{"superclass":{"refId":"spectre/DeviceChild","name":"DeviceChild"},"uri":"package:spectre/src/spectre/stencil_state.dart","name":"StencilState","id":"StencilState","children":[{"name":"StencilState","id":"StencilState2()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"name","id":"name","kind":"param"},{"ref":{"refId":"spectre/GraphicsDevice","name":"GraphicsDevice"},"name":"device","id":"device","kind":"param"}],"line":"24","kind":"constructor"}],"line":"23","kind":"class"},{"superclass":{"refId":"spectre/DeviceChild","name":"DeviceChild"},"comment":"A shader program specifies the behaviour of the programmable GPU pipeline.\nYou can apply a shader program to the GPU pipeline with\n[GraphicsContext.setShaderProgram].\n\n","uri":"package:spectre/src/spectre/shader_program.dart","name":"ShaderProgram","id":"ShaderProgram","children":[{"isSetter":true,"name":"vertexShader=","id":"vertexShader=1()","children":[{"ref":{"refId":"spectre/VertexShader","name":"VertexShader"},"name":"vs","id":"vs","kind":"param"}],"line":"84","kind":"method"},{"isSetter":true,"name":"fragmentShader=","id":"fragmentShader=1()","children":[{"ref":{"refId":"spectre/FragmentShader","name":"FragmentShader"},"name":"fs","id":"fs","kind":"param"}],"line":"93","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"finalize","id":"finalize0()","line":"107","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Detach [shader] from ShaderProgram. ","name":"_detach","isPrivate":true,"id":"_detach1()","children":[{"ref":{"refId":"spectre/SpectreShader","name":"SpectreShader"},"name":"shader","id":"shader","kind":"param"}],"line":"116","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Attach [shader] from ShaderProgram. See also: [link] ","name":"_attach","isPrivate":true,"id":"_attach1()","children":[{"ref":{"refId":"spectre/SpectreShader","name":"SpectreShader"},"name":"shader","id":"shader","kind":"param"}],"line":"123","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nLink attached shaders together forming a shader program.\n","name":"link","id":"link0()","line":"132","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"name":"_isUniformType","isPrivate":true,"id":"_isUniformType1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"type","id":"type","kind":"param"}],"line":"155","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"name":"_isSamplerType","isPrivate":true,"id":"_isSamplerType1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"type","id":"type","kind":"param"}],"line":"173","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"name":"_convertType","isPrivate":true,"id":"_convertType1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"type","id":"type","kind":"param"}],"line":"178","kind":"method"},{"returnType":{"refId":"spectre/UniformSetFunction","name":"UniformSetFunction"},"name":"_findUniformSetForType","isPrivate":true,"id":"_findUniformSetForType1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"type","id":"type","kind":"param"}],"line":"219","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"refreshUniforms","id":"refreshUniforms0()","line":"262","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"refreshAttributes","id":"refreshAttributes0()","line":"301","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Output each uniform variable input to the log. ","name":"logUniforms","id":"logUniforms0()","line":"327","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Output each sampler input to the log. ","name":"logSamplers","id":"logSamplers0()","line":"335","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Output each attribute input to the log. ","name":"logAttributes","id":"logAttributes0()","line":"343","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nIterate over all active uniform inputs and call [callback] for each one.\n\nSee [UniformCallback].\n","name":"forEachUniform","id":"forEachUniform1()","children":[{"ref":{"refId":"spectre/UniformCallback","name":"UniformCallback"},"name":"callback","id":"callback","kind":"param"}],"line":"355","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nIteraete over all active sampler inputs and call [callback] for each one.\n\nSee [SamplerCallback].\n","name":"forEachSampler","id":"forEachSampler1()","children":[{"ref":{"refId":"spectre/SamplerCallback","name":"SamplerCallback"},"name":"callback","id":"callback","kind":"param"}],"line":"366","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nIterate over all active attribute inputs and call [callback] for each one.\n\nSee [AttributeCallback].\n","name":"forEachAttribute","id":"forEachAttribute1()","children":[{"ref":{"refId":"spectre/AttributeCallback","name":"AttributeCallback"},"name":"callback","id":"callback","kind":"param"}],"line":"377","kind":"method"},{"name":"_findUniform","isPrivate":true,"id":"_findUniform1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"name","id":"name","kind":"param"}],"line":"383","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"_setUniform1f","isPrivate":true,"id":"_setUniform1f3()","children":[{"ref":{"refId":"spectre/GraphicsDevice","name":"GraphicsDevice"},"name":"device","id":"device","kind":"param"},{"name":"index","id":"index","kind":"param"},{"name":"argument","id":"argument","kind":"param"}],"line":"391","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"_setUniform2f","isPrivate":true,"id":"_setUniform2f3()","children":[{"ref":{"refId":"spectre/GraphicsDevice","name":"GraphicsDevice"},"name":"device","id":"device","kind":"param"},{"name":"index","id":"index","kind":"param"},{"name":"argument","id":"argument","kind":"param"}],"line":"405","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"_setUniform3f","isPrivate":true,"id":"_setUniform3f3()","children":[{"ref":{"refId":"spectre/GraphicsDevice","name":"GraphicsDevice"},"name":"device","id":"device","kind":"param"},{"name":"index","id":"index","kind":"param"},{"name":"argument","id":"argument","kind":"param"}],"line":"416","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"_setUniform4f","isPrivate":true,"id":"_setUniform4f3()","children":[{"ref":{"refId":"spectre/GraphicsDevice","name":"GraphicsDevice"},"name":"device","id":"device","kind":"param"},{"name":"index","id":"index","kind":"param"},{"name":"argument","id":"argument","kind":"param"}],"line":"427","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"_setUniform1i","isPrivate":true,"id":"_setUniform1i3()","children":[{"ref":{"refId":"spectre/GraphicsDevice","name":"GraphicsDevice"},"name":"device","id":"device","kind":"param"},{"name":"index","id":"index","kind":"param"},{"name":"argument","id":"argument","kind":"param"}],"line":"439","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"_setUniform2i","isPrivate":true,"id":"_setUniform2i3()","children":[{"ref":{"refId":"spectre/GraphicsDevice","name":"GraphicsDevice"},"name":"device","id":"device","kind":"param"},{"name":"index","id":"index","kind":"param"},{"name":"argument","id":"argument","kind":"param"}],"line":"453","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"_setUniform3i","isPrivate":true,"id":"_setUniform3i3()","children":[{"ref":{"refId":"spectre/GraphicsDevice","name":"GraphicsDevice"},"name":"device","id":"device","kind":"param"},{"name":"index","id":"index","kind":"param"},{"name":"argument","id":"argument","kind":"param"}],"line":"464","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"_setUniform4i","isPrivate":true,"id":"_setUniform4i3()","children":[{"ref":{"refId":"spectre/GraphicsDevice","name":"GraphicsDevice"},"name":"device","id":"device","kind":"param"},{"name":"index","id":"index","kind":"param"},{"name":"argument","id":"argument","kind":"param"}],"line":"475","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"_setUniformMatrix2","isPrivate":true,"id":"_setUniformMatrix23()","children":[{"ref":{"refId":"spectre/GraphicsDevice","name":"GraphicsDevice"},"name":"device","id":"device","kind":"param"},{"name":"index","id":"index","kind":"param"},{"name":"argument","id":"argument","kind":"param"}],"line":"487","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"_setUniformMatrix3","isPrivate":true,"id":"_setUniformMatrix33()","children":[{"ref":{"refId":"spectre/GraphicsDevice","name":"GraphicsDevice"},"name":"device","id":"device","kind":"param"},{"name":"index","id":"index","kind":"param"},{"name":"argument","id":"argument","kind":"param"}],"line":"495","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"_setUniformMatrix4","isPrivate":true,"id":"_setUniformMatrix43()","children":[{"ref":{"refId":"spectre/GraphicsDevice","name":"GraphicsDevice"},"name":"device","id":"device","kind":"param"},{"name":"index","id":"index","kind":"param"},{"name":"argument","id":"argument","kind":"param"}],"line":"503","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Update the stored value for [uniform] with [argument].","name":"updateUniform","id":"updateUniform2()","children":[{"ref":{"refId":"spectre/ShaderProgramUniform","name":"ShaderProgramUniform"},"name":"uniform","id":"uniform","kind":"param"},{"name":"argument","id":"argument","kind":"param"}],"line":"512","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Set Uniform variable [name] in this [ShaderProgram].","name":"setConstant","id":"setConstant2()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"name","id":"name","kind":"param"},{"name":"argument","id":"argument","kind":"param"}],"line":"516","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"setSamplerUnit","id":"setSamplerUnit2()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"name","id":"name","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"unit","id":"unit","kind":"param"}],"line":"527","kind":"method"},{"ref":{"refId":"spectre/VertexShader","name":"VertexShader"},"name":"vertexShader","id":"vertexShader","line":"83","kind":"property"},{"ref":{"refId":"spectre/FragmentShader","name":"FragmentShader"},"name":"fragmentShader","id":"fragmentShader","line":"92","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"Is the shader program linked? ","name":"linked","id":"linked","line":"257","kind":"property"},{"ref":{"refId":"dart.core/String","name":"String"},"comment":"Output from most recent linking. Can be [null] ","name":"linkLog","id":"linkLog","line":"260","kind":"property"},{"ref":{"refId":"dart.core/Map","arguments":[{"refId":"dart.core/String","name":"String"},{"refId":"spectre/ShaderProgramUniform","name":"ShaderProgramUniform"}],"name":"Map"},"isFinal":true,"name":"uniforms","id":"uniforms","line":"72","kind":"variable"},{"ref":{"refId":"dart.core/Map","arguments":[{"refId":"dart.core/String","name":"String"},{"refId":"spectre/ShaderProgramAttribute","name":"ShaderProgramAttribute"}],"name":"Map"},"isFinal":true,"name":"attributes","id":"attributes","line":"74","kind":"variable"},{"ref":{"refId":"dart.core/Map","arguments":[{"refId":"dart.core/String","name":"String"},{"refId":"spectre/ShaderProgramSampler","name":"ShaderProgramSampler"}],"name":"Map"},"isFinal":true,"name":"samplers","id":"samplers","line":"76","kind":"variable"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"_isLinked","isPrivate":true,"id":"_isLinked","line":"79","kind":"variable"},{"ref":{"refId":"dart.core/String","name":"String"},"name":"_linkLog","isPrivate":true,"id":"_linkLog","line":"80","kind":"variable"},{"ref":{"refId":"spectre/VertexShader","name":"VertexShader"},"name":"_vertexShader","isPrivate":true,"id":"_vertexShader","line":"82","kind":"variable"},{"ref":{"refId":"spectre/FragmentShader","name":"FragmentShader"},"name":"_fragmentShader","isPrivate":true,"id":"_fragmentShader","line":"91","kind":"variable"},{"ref":{"refId":"dart.dom.web_gl/Program","name":"Program"},"name":"_program","isPrivate":true,"id":"_program","line":"100","kind":"variable"},{"name":"ShaderProgram","id":"ShaderProgram2()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"name","id":"name","kind":"param"},{"ref":{"refId":"spectre/GraphicsDevice","name":"GraphicsDevice"},"name":"device","id":"device","kind":"param"}],"line":"102","kind":"constructor"}],"line":"71","kind":"class"},{"uri":"package:spectre/src/spectre/shader_program.dart","name":"UniformSetFunction","id":"UniformSetFunction","children":[{"name":"device","id":"device","kind":"param"},{"name":"location","id":"location","kind":"param"},{"name":"argument","id":"argument","kind":"param"}],"line":"64","kind":"typedef"},{"returnType":{"refId":"void","name":"void"},"uri":"package:spectre/src/spectre/shader_program.dart","name":"SamplerCallback","id":"SamplerCallback","children":[{"ref":{"refId":"spectre/ShaderProgramSampler","name":"ShaderProgramSampler"},"name":"sampler","id":"sampler","kind":"param"}],"line":"62","kind":"typedef"},{"returnType":{"refId":"void","name":"void"},"uri":"package:spectre/src/spectre/shader_program.dart","name":"UniformCallback","id":"UniformCallback","children":[{"ref":{"refId":"spectre/ShaderProgramUniform","name":"ShaderProgramUniform"},"name":"uniform","id":"uniform","kind":"param"}],"line":"61","kind":"typedef"},{"returnType":{"refId":"void","name":"void"},"uri":"package:spectre/src/spectre/shader_program.dart","name":"AttributeCallback","id":"AttributeCallback","children":[{"ref":{"refId":"spectre/ShaderProgramAttribute","name":"ShaderProgramAttribute"},"name":"attribute","id":"attribute","kind":"param"}],"line":"60","kind":"typedef"},{"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"A shader program attribute input ","uri":"package:spectre/src/spectre/shader_program.dart","name":"ShaderProgramAttribute","id":"ShaderProgramAttribute","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"location","id":"location","line":"55","kind":"property"},{"ref":{"refId":"dart.core/String","name":"String"},"isFinal":true,"name":"name","id":"name","line":"50","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isFinal":true,"name":"index","id":"index","line":"51","kind":"variable"},{"ref":{"refId":"dart.core/String","name":"String"},"isFinal":true,"name":"type","id":"type","line":"52","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isFinal":true,"name":"size","id":"size","line":"53","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"_location","isPrivate":true,"id":"_location","line":"54","kind":"variable"},{"name":"ShaderProgramAttribute","id":"ShaderProgramAttribute5()","children":[{"initializedField":{"refId":"spectre/ShaderProgramAttribute/name","name":"name"},"ref":{"refId":"dart.core/String","name":"String"},"name":"name","id":"name","kind":"param"},{"initializedField":{"refId":"spectre/ShaderProgramAttribute/index","name":"index"},"ref":{"refId":"dart.core/int","name":"int"},"name":"index","id":"index","kind":"param"},{"initializedField":{"refId":"spectre/ShaderProgramAttribute/type","name":"type"},"ref":{"refId":"dart.core/String","name":"String"},"name":"type","id":"type","kind":"param"},{"initializedField":{"refId":"spectre/ShaderProgramAttribute/size","name":"size"},"ref":{"refId":"dart.core/int","name":"int"},"name":"size","id":"size","kind":"param"},{"initializedField":{"refId":"spectre/ShaderProgramAttribute/_location","name":"_location"},"ref":{"refId":"dart.core/int","name":"int"},"name":"_location","isPrivate":true,"id":"_location","line":"57","kind":"param"}],"line":"56","kind":"constructor"}],"line":"49","kind":"class"},{"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"A shader program sampler input ","uri":"package:spectre/src/spectre/shader_program.dart","name":"ShaderProgramSampler","id":"ShaderProgramSampler","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"textureUnit","id":"textureUnit","line":"43","kind":"property"},{"ref":{"refId":"dart.core/String","name":"String"},"isFinal":true,"name":"name","id":"name","line":"37","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isFinal":true,"name":"index","id":"index","line":"38","kind":"variable"},{"ref":{"refId":"dart.core/String","name":"String"},"isFinal":true,"name":"type","id":"type","line":"39","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isFinal":true,"name":"size","id":"size","line":"40","kind":"variable"},{"isFinal":true,"name":"location","id":"location","line":"41","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"_textureUnit","isPrivate":true,"id":"_textureUnit","line":"42","kind":"variable"},{"name":"ShaderProgramSampler","id":"ShaderProgramSampler5()","children":[{"initializedField":{"refId":"spectre/ShaderProgramSampler/name","name":"name"},"ref":{"refId":"dart.core/String","name":"String"},"name":"name","id":"name","kind":"param"},{"initializedField":{"refId":"spectre/ShaderProgramSampler/index","name":"index"},"ref":{"refId":"dart.core/int","name":"int"},"name":"index","id":"index","kind":"param"},{"initializedField":{"refId":"spectre/ShaderProgramSampler/type","name":"type"},"ref":{"refId":"dart.core/String","name":"String"},"name":"type","id":"type","kind":"param"},{"initializedField":{"refId":"spectre/ShaderProgramSampler/size","name":"size"},"ref":{"refId":"dart.core/int","name":"int"},"name":"size","id":"size","kind":"param"},{"initializedField":{"refId":"spectre/ShaderProgramSampler/location","name":"location"},"name":"location","id":"location","line":"45","kind":"param"}],"line":"44","kind":"constructor"}],"line":"36","kind":"class"},{"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"A shader program uniform input ","uri":"package:spectre/src/spectre/shader_program.dart","name":"ShaderProgramUniform","id":"ShaderProgramUniform","children":[{"ref":{"refId":"dart.core/String","name":"String"},"isFinal":true,"name":"name","id":"name","line":"25","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isFinal":true,"name":"index","id":"index","line":"26","kind":"variable"},{"ref":{"refId":"dart.core/String","name":"String"},"isFinal":true,"name":"type","id":"type","line":"27","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isFinal":true,"name":"size","id":"size","line":"28","kind":"variable"},{"isFinal":true,"name":"location","id":"location","line":"29","kind":"variable"},{"ref":{"refId":"spectre/UniformSetFunction","name":"UniformSetFunction"},"isFinal":true,"name":"_apply","isPrivate":true,"id":"_apply","line":"30","kind":"variable"},{"name":"ShaderProgramUniform","id":"ShaderProgramUniform6()","children":[{"initializedField":{"refId":"spectre/ShaderProgramUniform/name","name":"name"},"ref":{"refId":"dart.core/String","name":"String"},"name":"name","id":"name","kind":"param"},{"initializedField":{"refId":"spectre/ShaderProgramUniform/index","name":"index"},"ref":{"refId":"dart.core/int","name":"int"},"name":"index","id":"index","kind":"param"},{"initializedField":{"refId":"spectre/ShaderProgramUniform/type","name":"type"},"ref":{"refId":"dart.core/String","name":"String"},"name":"type","id":"type","kind":"param"},{"initializedField":{"refId":"spectre/ShaderProgramUniform/size","name":"size"},"ref":{"refId":"dart.core/int","name":"int"},"name":"size","id":"size","kind":"param"},{"initializedField":{"refId":"spectre/ShaderProgramUniform/location","name":"location"},"name":"location","id":"location","line":"32","kind":"param"},{"initializedField":{"refId":"spectre/ShaderProgramUniform/_apply","name":"_apply"},"ref":{"refId":"spectre/UniformSetFunction","name":"UniformSetFunction"},"name":"_apply","isPrivate":true,"id":"_apply","line":"32","kind":"param"}],"line":"31","kind":"constructor"}],"kind":"class"},{"superclass":{"refId":"spectre/DeviceChild","name":"DeviceChild"},"comment":"Contains sampler state, which determines how to sample texture data.","uri":"package:spectre/src/spectre/sampler_state.dart","name":"SamplerState","id":"SamplerState","children":[{"isSetter":true,"name":"addressU=","id":"addressU=1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"value","id":"value","kind":"param"}],"line":"157","kind":"method"},{"isSetter":true,"name":"addressV=","id":"addressV=1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"value","id":"value","kind":"param"}],"line":"167","kind":"method"},{"isSetter":true,"comment":"The minification filter to use.\n\nThrows [ArgumentError] if the [value] is not an enumeration within\n[TextureMinFilter].","name":"minFilter=","id":"minFilter=1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"value","id":"value","kind":"param"}],"line":"179","kind":"method"},{"isSetter":true,"comment":"The magnification filter to use.\n\nIf the [SpectreTexture] does not contain mipmaps, such as non-power of\ntwo textures, then the only valid values are Texture.Linear and\nTexture.Point.\n\nThrows [ArgumentError] if the [value] is not an enumeration within\n[TextureMinFilter].","name":"magFilter=","id":"magFilter=1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"value","id":"value","kind":"param"}],"line":"197","kind":"method"},{"isSetter":true,"comment":"The maximum anisotropy.\n\nAnisotropic filtering is only available through an extension to WebGL.\nThe maximum acceptable value is dependent on the graphics hardware, and\ncan be queried within [GraphicsDeviceCapabilities]. When setting the value\nthe anisotropy level will be capped to the range 1 <\n[GraphicsDeviceCapabilities.maxAnisotropyLevel]\n\nThrows [ArgumentError] if [value] is not a positive number.","name":"maxAnisotropy=","id":"maxAnisotropy=1()","children":[{"ref":{"refId":"dart.core/double","name":"double"},"name":"value","id":"value","kind":"param"}],"line":"216","kind":"method"},{"comment":"Serializes the [SamplerState] to a JSON.","name":"toJson","id":"toJson0()","line":"231","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Deserializes the [SamplerState] from a JSON.","name":"fromJson","id":"fromJson1()","children":[{"ref":{"refId":"dart.core/Map","name":"Map"},"name":"values","id":"values","kind":"param"}],"line":"246","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"The texture-address mode for the u-coordinate.","name":"addressU","id":"addressU","line":"156","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"The texture-address mode for the v-coordinate.","name":"addressV","id":"addressV","line":"166","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"minFilter","id":"minFilter","line":"186","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"magFilter","id":"magFilter","line":"204","kind":"property"},{"ref":{"refId":"dart.core/double","name":"double"},"name":"maxAnisotropy","id":"maxAnisotropy","line":"223","kind":"property"},{"ref":{"refId":"dart.core/String","name":"String"},"isStatic":true,"comment":"Serialization name for [addressU].","name":"_addressUName","isPrivate":true,"id":"_addressUName","line":"30","kind":"variable"},{"ref":{"refId":"dart.core/String","name":"String"},"isStatic":true,"comment":"Serialization name for [addressV].","name":"_addressVName","isPrivate":true,"id":"_addressVName","line":"32","kind":"variable"},{"ref":{"refId":"dart.core/String","name":"String"},"isStatic":true,"comment":"Serialization name for [minFilter].","name":"_minFilterName","isPrivate":true,"id":"_minFilterName","line":"34","kind":"variable"},{"ref":{"refId":"dart.core/String","name":"String"},"isStatic":true,"comment":"Serialization name for [magFilter].","name":"_magFilterName","isPrivate":true,"id":"_magFilterName","line":"36","kind":"variable"},{"ref":{"refId":"dart.core/String","name":"String"},"isStatic":true,"comment":"Serialization name for [maxAnisotropy].","name":"_maxAnisotropyName","isPrivate":true,"id":"_maxAnisotropyName","line":"38","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"The texture-address mode for the u-coordinate.","name":"_addressU","isPrivate":true,"id":"_addressU","line":"45","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"The texture-address mode for the v-coordinate.","name":"_addressV","isPrivate":true,"id":"_addressV","line":"47","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"The minification filter to use.","name":"_minFilter","isPrivate":true,"id":"_minFilter","line":"49","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"The magnification filter to use.","name":"_magFilter","isPrivate":true,"id":"_magFilter","line":"51","kind":"variable"},{"ref":{"refId":"dart.core/double","name":"double"},"comment":"The maximum anisotropy.\n\nThe default value is 1.0.","name":"_maxAnisotropy","isPrivate":true,"id":"_maxAnisotropy","line":"55","kind":"variable"},{"comment":"Creates an instance of [SamplerState] with default values.","name":"SamplerState","id":"SamplerState2()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"name","id":"name","kind":"param"},{"ref":{"refId":"spectre/GraphicsDevice","name":"GraphicsDevice"},"name":"device","id":"device","kind":"param"}],"line":"62","kind":"constructor"},{"comment":"Initializes an instance of [SamplerState] with anisotropic filtering and\ntexture coordinate clamping.\n\nThe state object has the following settings.\n    addressU = TextureAddressMode.Clamp;\n    addressV = TextureAddressMode.Clamp;\n    maxAnisotropy = 4;","name":"SamplerState.anisotropicClamp","id":"SamplerState.anisotropicClamp2()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"name","id":"name","kind":"param"},{"ref":{"refId":"spectre/GraphicsDevice","name":"GraphicsDevice"},"name":"device","id":"device","kind":"param"}],"line":"72","kind":"constructor"},{"comment":"Initializes an instance of [SamplerState] with anisotropic filtering and\ntexture coordinate wrapping.\n\nThe state object has the following settings.\n    addressU = TextureAddressMode.Wrap;\n    addressV = TextureAddressMode.Wrap;\n    maxAnisotropy = 4;","name":"SamplerState.anisotropicWrap","id":"SamplerState.anisotropicWrap2()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"name","id":"name","kind":"param"},{"ref":{"refId":"spectre/GraphicsDevice","name":"GraphicsDevice"},"name":"device","id":"device","kind":"param"}],"line":"85","kind":"constructor"},{"comment":"Initializes an instance of [SamplerState] with linear filtering and\ntexture coordinate clamping.\n\nThe state object has the following settings.\n    addressU = TextureAddressMode.Clamp;\n    addressV = TextureAddressMode.Clamp;\n    minFilter = TextureMinFilter.Linear;\n    magFilter = TextureMagFilter.Linear;","name":"SamplerState.linearClamp","id":"SamplerState.linearClamp2()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"name","id":"name","kind":"param"},{"ref":{"refId":"spectre/GraphicsDevice","name":"GraphicsDevice"},"name":"device","id":"device","kind":"param"}],"line":"99","kind":"constructor"},{"comment":"Initializes an instance of [SamplerState] with linear filtering and\ntexture coordinate wrapping.\n\nThe state object has the following settings.\n    addressU = TextureAddressMode.Wrap;\n    addressV = TextureAddressMode.Wrap;\n    minFilter = TextureMinFilter.Linear;\n    magFilter = TextureMagFilter.Linear;","name":"SamplerState.linearWrap","id":"SamplerState.linearWrap2()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"name","id":"name","kind":"param"},{"ref":{"refId":"spectre/GraphicsDevice","name":"GraphicsDevice"},"name":"device","id":"device","kind":"param"}],"line":"114","kind":"constructor"},{"comment":"Initializes an instance of [SamplerState] with point filtering and\ntexture coordinate clamping.\n\nThe state object has the following settings.\n    addressU = TextureAddressMode.Clamp;\n    addressV = TextureAddressMode.Clamp;\n    minFilter = TextureMinFilter.Point;\n    magFilter = TextureMagFilter.Point;","name":"SamplerState.pointClamp","id":"SamplerState.pointClamp2()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"name","id":"name","kind":"param"},{"ref":{"refId":"spectre/GraphicsDevice","name":"GraphicsDevice"},"name":"device","id":"device","kind":"param"}],"line":"129","kind":"constructor"},{"comment":"Initializes an instance of [SamplerState] with point filtering and\ntexture coordinate wrapping.\n\nThe state object has the following settings.\n    addressU = TextureAddressMode.Wrap;\n    addressV = TextureAddressMode.Wrap;\n    minFilter = TextureMinFilter.Point;\n    magFilter = TextureMagFilter.Point;","name":"SamplerState.pointWrap","id":"SamplerState.pointWrap2()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"name","id":"name","kind":"param"},{"ref":{"refId":"spectre/GraphicsDevice","name":"GraphicsDevice"},"name":"device","id":"device","kind":"param"}],"line":"144","kind":"constructor"}],"kind":"class"},{"superclass":{"refId":"spectre/DeviceChild","name":"DeviceChild"},"comment":"A [RenderTarget] specifies the buffers where color, depth, and stencil\nare written to during a draw call.\n\nNOTE: To output into the system provided render target see\n[RenderTarget.systemRenderTarget]\n","uri":"package:spectre/src/spectre/render_target.dart","name":"RenderTarget","id":"RenderTarget","children":[{"returnType":{"refId":"void","name":"void"},"name":"finalize","id":"finalize0()","line":"58","kind":"method"},{"returnType":{"refId":"dart.dom.web_gl/Framebuffer","name":"Framebuffer"},"comment":"Bind this texture and return the previously bound framebuffer. ","name":"_pushBind","isPrivate":true,"id":"_pushBind0()","line":"67","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Rebind [oldBind] ","name":"_popBind","isPrivate":true,"id":"_popBind1()","children":[{"ref":{"refId":"dart.dom.web_gl/Framebuffer","name":"Framebuffer"},"name":"oldBind","id":"oldBind","kind":"param"}],"line":"75","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"_bind","isPrivate":true,"id":"_bind0()","line":"80","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"_updateStatus","isPrivate":true,"id":"_updateStatus0()","line":"85","kind":"method"},{"isSetter":true,"comment":"Set color target to be [colorBuffer].\n\nA color buffer must be a [Texture2D] or [RenderBuffer].\n\nA null color buffer indicates the system provided color buffer.\n","name":"colorTarget=","id":"colorTarget=1()","children":[{"name":"colorBuffer","id":"colorBuffer","kind":"param"}],"line":"99","kind":"method"},{"isSetter":true,"comment":"Set depth buffer output to be [depth].\n\nnull indicates the system provided depth buffer.\n\nThe depth buffer can be a [Texture2D] or [RenderBuffer].\n\nSet depth target to be [depthBuffer].\n\nA depth buffer must be a [Texture2D] or [RenderBuffer].\n\nA null depth buffer indicates the system provided depth buffer.\n","name":"depthTarget=","id":"depthTarget=1()","children":[{"name":"depthBuffer","id":"depthBuffer","kind":"param"}],"line":"145","kind":"method"},{"ref":{"refId":"spectre/DeviceChild","name":"DeviceChild"},"name":"colorTarget","id":"colorTarget","line":"36","kind":"property"},{"ref":{"refId":"spectre/DeviceChild","name":"DeviceChild"},"name":"depthTarget","id":"depthTarget","line":"37","kind":"property"},{"ref":{"refId":"spectre/DeviceChild","name":"DeviceChild"},"name":"stencilTarget","id":"stencilTarget","line":"38","kind":"property"},{"ref":{"refId":"spectre/RenderTarget","name":"RenderTarget"},"isStatic":true,"comment":"System provided rendering target ","name":"systemRenderTarget","id":"systemRenderTarget","line":"42","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"Is the render target valid and renderable? ","name":"isRenderable","id":"isRenderable","line":"46","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"isFinal":true,"name":"_bindTarget","isPrivate":true,"id":"_bindTarget","line":"30","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isFinal":true,"name":"_bindingParam","isPrivate":true,"id":"_bindingParam","line":"31","kind":"variable"},{"ref":{"refId":"dart.dom.web_gl/Framebuffer","name":"Framebuffer"},"name":"_deviceFramebuffer","isPrivate":true,"id":"_deviceFramebuffer","line":"33","kind":"variable"},{"ref":{"refId":"spectre/DeviceChild","name":"DeviceChild"},"name":"_colorTarget","isPrivate":true,"id":"_colorTarget","line":"34","kind":"variable"},{"ref":{"refId":"spectre/DeviceChild","name":"DeviceChild"},"name":"_depthTarget","isPrivate":true,"id":"_depthTarget","line":"35","kind":"variable"},{"ref":{"refId":"spectre/RenderTarget","name":"RenderTarget"},"isStatic":true,"name":"_systemRenderTarget","isPrivate":true,"id":"_systemRenderTarget","line":"40","kind":"variable"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"_renderable","isPrivate":true,"id":"_renderable","line":"44","kind":"variable"},{"name":"RenderTarget","id":"RenderTarget2()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"name","id":"name","kind":"param"},{"ref":{"refId":"spectre/GraphicsDevice","name":"GraphicsDevice"},"name":"device","id":"device","kind":"param"}],"line":"48","kind":"constructor"},{"name":"RenderTarget.systemTarget","id":"RenderTarget.systemTarget2()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"name","id":"name","kind":"param"},{"ref":{"refId":"spectre/GraphicsDevice","name":"GraphicsDevice"},"name":"device","id":"device","kind":"param"}],"line":"53","kind":"constructor"}],"line":"29","kind":"class"},{"superclass":{"refId":"spectre/DeviceChild","name":"DeviceChild"},"comment":"A [RenderBuffer] represents the storage for either a color, depth,\nor stencil buffer render target attachment.\n","uri":"package:spectre/src/spectre/render_buffer.dart","name":"RenderBuffer","id":"RenderBuffer","children":[{"returnType":{"refId":"dart.core/String","name":"String"},"isStatic":true,"name":"formatToString","id":"formatToString1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"format","id":"format","kind":"param"}],"line":"31","kind":"method"},{"returnType":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"stringToFormat","id":"stringToFormat1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"format","id":"format","kind":"param"}],"line":"44","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"finalize","id":"finalize0()","line":"72","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"_allocateStorage","isPrivate":true,"id":"_allocateStorage3()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"width","id":"width","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"height","id":"height","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"format","id":"format","kind":"param"}],"line":"78","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Allocate storage for render buffer with [format] and\n[width]x[height] pixels.\n","name":"allocateStorage","id":"allocateStorage3()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"width","id":"width","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"height","id":"height","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"format","id":"format","kind":"param"}],"line":"85","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"width","id":"width","line":"61","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"height","id":"height","line":"63","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"FormatRGB","id":"FormatRGB","line":"27","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"FormatRGBA","id":"FormatRGBA","line":"28","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"FormatDepth","id":"FormatDepth","line":"29","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isFinal":true,"name":"_target","isPrivate":true,"id":"_target","line":"57","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isFinal":true,"name":"_target_param","isPrivate":true,"id":"_target_param","line":"58","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"_width","isPrivate":true,"id":"_width","line":"60","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"_height","isPrivate":true,"id":"_height","line":"62","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"_format","isPrivate":true,"id":"_format","line":"64","kind":"variable"},{"ref":{"refId":"dart.dom.web_gl/Renderbuffer","name":"Renderbuffer"},"name":"_buffer","isPrivate":true,"id":"_buffer","line":"65","kind":"variable"},{"name":"RenderBuffer","id":"RenderBuffer2()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"name","id":"name","kind":"param"},{"ref":{"refId":"spectre/GraphicsDevice","name":"GraphicsDevice"},"name":"device","id":"device","kind":"param"}],"line":"67","kind":"constructor"}],"line":"26","kind":"class"},{"superclass":{"refId":"spectre/DeviceChild","name":"DeviceChild"},"comment":"RasterizerState controls how the GPU rasterizer functions including\nprimitive culling and width of rasterized lines\nSet using [GraphicsContext.setRasterizerState]","uri":"package:spectre/src/spectre/rasterizer_state.dart","name":"RasterizerState","id":"RasterizerState","children":[{"isSetter":true,"comment":"Spcifies what triangles are culled based on its direction.\nThe default value is [CullMode.Back].\nThrows [ArgumentError] if the [value] is not an enumeration within\n[CullMode].","name":"cullMode=","id":"cullMode=1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"value","id":"value","kind":"param"}],"line":"113","kind":"method"},{"isSetter":true,"comment":"Specifies the winding of a front facing polygon.\nThe default value is [FrontFace.CounterClockwise].\nThrows [ArgumentError] if the [value] is not an enumeration within\n[FrontFace].","name":"frontFace=","id":"frontFace=1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"value","id":"value","kind":"param"}],"line":"127","kind":"method"},{"isSetter":true,"name":"depthBias=","id":"depthBias=1()","children":[{"ref":{"refId":"dart.core/double","name":"double"},"name":"value","id":"value","kind":"param"}],"line":"143","kind":"method"},{"isSetter":true,"name":"slopeScaleDepthBias=","id":"slopeScaleDepthBias=1()","children":[{"ref":{"refId":"dart.core/double","name":"double"},"name":"value","id":"value","kind":"param"}],"line":"151","kind":"method"},{"isSetter":true,"name":"scissorTestEnabled=","id":"scissorTestEnabled=1()","children":[{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"value","id":"value","kind":"param"}],"line":"157","kind":"method"},{"comment":"Serializes the [RasterizerState] to a JSON.","name":"toJson","id":"toJson0()","line":"164","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Deserializes the [RasterizerState] from a JSON.","name":"fromJson","id":"fromJson1()","children":[{"name":"values","id":"values","kind":"param"}],"line":"179","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"cullMode","id":"cullMode","line":"120","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"frontFace","id":"frontFace","line":"134","kind":"property"},{"ref":{"refId":"dart.core/double","name":"double"},"comment":"The depth bias for polygons.\nThis is the amount of bias to apply to the depth of a primitive to\nalleviate depth testing\nproblems for primitives of similar depth.\nThe default value is 0.","name":"depthBias","id":"depthBias","line":"142","kind":"property"},{"ref":{"refId":"dart.core/double","name":"double"},"comment":"A bias value that takes into account the slope of a polygon.\nThis bias value is applied to coplanar primitives to reduce aliasing and\nother rendering\nartifacts caused by z-fighting.\nThe default is 0.","name":"slopeScaleDepthBias","id":"slopeScaleDepthBias","line":"150","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"Whether scissor testing is enabled.\nScissorTestEnable  Enables or disables scissor testing.\nThe default is false.","name":"scissorTestEnabled","id":"scissorTestEnabled","line":"156","kind":"property"},{"ref":{"refId":"dart.core/String","name":"String"},"isStatic":true,"comment":"Serialization name for [cullMode].","name":"_cullModeName","isPrivate":true,"id":"_cullModeName","line":"32","kind":"variable"},{"ref":{"refId":"dart.core/String","name":"String"},"isStatic":true,"comment":"Serialization name for [frontFace].","name":"_frontFaceName","isPrivate":true,"id":"_frontFaceName","line":"34","kind":"variable"},{"ref":{"refId":"dart.core/String","name":"String"},"isStatic":true,"comment":"Serialization name for [depthBias].","name":"_depthBiasName","isPrivate":true,"id":"_depthBiasName","line":"36","kind":"variable"},{"ref":{"refId":"dart.core/String","name":"String"},"isStatic":true,"comment":"Serialization name for [slopeScaleDepthBias].","name":"_slopeScaleDepthBiasName","isPrivate":true,"id":"_slopeScaleDepthBiasName","line":"38","kind":"variable"},{"ref":{"refId":"dart.core/String","name":"String"},"isStatic":true,"comment":"Serialization name for [scissorTestEnabled].","name":"_scissorTestEnabledName","isPrivate":true,"id":"_scissorTestEnabledName","line":"40","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"Spcifies what triangles are culled based on its direction.\nThe default value is [CullMode.Back].","name":"_cullMode","isPrivate":true,"id":"_cullMode","line":"48","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"Specifies the winding of a front facing polygon.\nThe default value is [FrontFace.CounterClockwise].","name":"_frontFace","isPrivate":true,"id":"_frontFace","line":"51","kind":"variable"},{"ref":{"refId":"dart.core/double","name":"double"},"comment":"The depth bias for polygons.\nThis is the amount of bias to apply to the depth of a primitive to alleviate depth testing\nproblems for primitives of similar depth.\nThe default value is 0.","name":"_depthBias","isPrivate":true,"id":"_depthBias","line":"56","kind":"variable"},{"ref":{"refId":"dart.core/double","name":"double"},"comment":"A bias value that takes into account the slope of a polygon.\nThis bias value is applied to coplanar primitives to reduce aliasing and other rendering\nartifacts caused by z-fighting.\nThe default is 0.","name":"_slopeScaleDepthBias","isPrivate":true,"id":"_slopeScaleDepthBias","line":"61","kind":"variable"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"Whether scissor testing is enabled.\nScissorTestEnable  Enables or disables scissor testing.\nThe default is false.","name":"_scissorTestEnabled","isPrivate":true,"id":"_scissorTestEnabled","line":"65","kind":"variable"},{"comment":"Creates a new instance of the [RasterizerState] class.","name":"RasterizerState","id":"RasterizerState2()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"name","id":"name","kind":"param"},{"ref":{"refId":"spectre/GraphicsDevice","name":"GraphicsDevice"},"name":"device","id":"device","kind":"param"}],"line":"72","kind":"constructor"},{"comment":"Initializes an instance of the [RasterizerState] class with settings for\nculling primitives with clockwise winding order.\nThe state object has the following settings.\n    cullMode = CullMode.Back;\n    frontFace = FrontFace.CounterClockwise;","name":"RasterizerState.cullClockwise","id":"RasterizerState.cullClockwise2()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"name","id":"name","kind":"param"},{"ref":{"refId":"spectre/GraphicsDevice","name":"GraphicsDevice"},"name":"device","id":"device","kind":"param"}],"line":"80","kind":"constructor"},{"comment":"Initializes an instance of the [RasterizerState] class with settings for\nculling primitives with counter-clockwise winding order.\nThe state object has the following settings.\n    cullMode = CullMode.Back;\n    frontFace = Clockwise;","name":"RasterizerState.cullCounterClockwise","id":"RasterizerState.cullCounterClockwise2()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"name","id":"name","kind":"param"},{"ref":{"refId":"spectre/GraphicsDevice","name":"GraphicsDevice"},"name":"device","id":"device","kind":"param"}],"line":"90","kind":"constructor"},{"comment":"Initializes an instance of the [RasterizerState] class with settings for\nnot culling any primitives.\nThe state object has the following settings.\n    cullMode = CullMode.None;\n    frontFace = FrontFace.CounterClockwise;","name":"RasterizerState.cullNone","id":"RasterizerState.cullNone2()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"name","id":"name","kind":"param"},{"ref":{"refId":"spectre/GraphicsDevice","name":"GraphicsDevice"},"name":"device","id":"device","kind":"param"}],"line":"100","kind":"constructor"}],"line":"26","kind":"class"},{"superclass":{"refId":"spectre/Enum","name":"Enum"},"uri":"package:spectre/src/spectre/primitive_topology.dart","name":"PrimitiveTopology","id":"PrimitiveTopology","children":[{"returnType":{"refId":"dart.core/int","name":"int"},"isStatic":true,"comment":"Convert a [String] to a [PrimitiveTopology].","name":"parse","id":"parse1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"name","id":"name","kind":"param"}],"line":"38","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"isStatic":true,"comment":"Convert a [PrimitiveTopology] to a [String].","name":"stringify","id":"stringify1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"value","id":"value","kind":"param"}],"line":"40","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"isStatic":true,"comment":"Checks whether the value is a valid enumeration.","name":"isValid","id":"isValid1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"value","id":"value","kind":"param"}],"line":"42","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"comment":"Three vertex triangle primitive toplogy.","name":"Triangles","id":"Triangles","line":"25","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"comment":"Two vertex line primitive topology.","name":"Lines","id":"Lines","line":"27","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"comment":"One vertex point primitive topology.","name":"Points","id":"Points","line":"29","kind":"variable"},{"ref":{"refId":"dart.core/Map","arguments":[{"refId":"dart.core/String","name":"String"},{"refId":"dart.core/int","name":"int"}],"name":"Map"},"isStatic":true,"name":"_values","isPrivate":true,"id":"_values","line":"31","kind":"variable"}],"line":"23","kind":"class"},{"superclass":{"refId":"spectre/CameraController","name":"CameraController"},"uri":"package:spectre/src/spectre/orbit_camera_controller.dart","name":"OrbitCameraController","id":"OrbitCameraController","children":[{"returnType":{"refId":"void","name":"void"},"name":"updateCamera","id":"updateCamera2()","children":[{"ref":{"refId":"dart.core/num","name":"num"},"name":"dt","id":"dt","kind":"param"},{"ref":{"refId":"spectre/Camera","name":"Camera"},"name":"cam","id":"cam","kind":"param"}],"line":"50","kind":"method"},{"returnType":{"refId":"dart.core/double","name":"double"},"name":"_clamp","isPrivate":true,"id":"_clamp3()","children":[{"ref":{"refId":"dart.core/double","name":"double"},"name":"v","id":"v","kind":"param"},{"ref":{"refId":"dart.core/double","name":"double"},"name":"min","id":"min","kind":"param"},{"ref":{"refId":"dart.core/double","name":"double"},"name":"max","id":"max","kind":"param"}],"line":"71","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"_ZoomView","isPrivate":true,"id":"_ZoomView2()","children":[{"ref":{"refId":"dart.core/num","name":"num"},"name":"dt","id":"dt","kind":"param"},{"ref":{"refId":"dart.core/num","name":"num"},"name":"zoomDelta","id":"zoomDelta","kind":"param"}],"line":"81","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"_RotateView","isPrivate":true,"id":"_RotateView4()","children":[{"ref":{"refId":"dart.core/num","name":"num"},"name":"dt","id":"dt","kind":"param"},{"ref":{"refId":"spectre/Camera","name":"Camera"},"name":"cam","id":"cam","kind":"param"},{"ref":{"refId":"dart.core/num","name":"num"},"name":"yawDelta","id":"yawDelta","kind":"param"},{"ref":{"refId":"dart.core/num","name":"num"},"name":"pitchDelta","id":"pitchDelta","kind":"param"}],"line":"87","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"_ApplyFriction","isPrivate":true,"id":"_ApplyFriction1()","children":[{"ref":{"refId":"dart.core/num","name":"num"},"name":"dt","id":"dt","kind":"param"}],"line":"99","kind":"method"},{"ref":{"refId":"dart.core/num","name":"num"},"name":"mouseSensitivity","id":"mouseSensitivity","line":"24","kind":"variable"},{"ref":{"refId":"dart.core/num","name":"num"},"name":"zoomSpeed","id":"zoomSpeed","line":"25","kind":"variable"},{"ref":{"refId":"dart.core/num","name":"num"},"name":"accumDX","id":"accumDX","line":"27","kind":"variable"},{"ref":{"refId":"dart.core/num","name":"num"},"name":"accumDY","id":"accumDY","line":"28","kind":"variable"},{"ref":{"refId":"dart.core/num","name":"num"},"name":"accumDZ","id":"accumDZ","line":"29","kind":"variable"},{"ref":{"refId":"dart.core/num","name":"num"},"name":"yaw","id":"yaw","line":"31","kind":"variable"},{"ref":{"refId":"dart.core/num","name":"num"},"name":"pitch","id":"pitch","line":"32","kind":"variable"},{"ref":{"refId":"dart.core/num","name":"num"},"name":"radius","id":"radius","line":"33","kind":"variable"},{"ref":{"refId":"dart.core/num","name":"num"},"name":"minYaw","id":"minYaw","line":"35","kind":"variable"},{"ref":{"refId":"dart.core/num","name":"num"},"name":"maxYaw","id":"maxYaw","line":"36","kind":"variable"},{"ref":{"refId":"dart.core/num","name":"num"},"name":"minRadius","id":"minRadius","line":"37","kind":"variable"},{"ref":{"refId":"dart.core/num","name":"num"},"name":"maxRadius","id":"maxRadius","line":"38","kind":"variable"},{"ref":{"refId":"dart.core/num","name":"num"},"name":"momentumDuration","id":"momentumDuration","line":"40","kind":"variable"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"hasMomentum","id":"hasMomentum","line":"42","kind":"variable"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"hasFriction","id":"hasFriction","line":"43","kind":"variable"},{"ref":{"refId":"vector_math/Vector2","name":"Vector2"},"name":"_momentum","isPrivate":true,"id":"_momentum","line":"45","kind":"variable"},{"ref":{"refId":"dart.core/num","name":"num"},"name":"_momentumTime","isPrivate":true,"id":"_momentumTime","line":"46","kind":"variable"},{"name":"OrbitCameraController","id":"OrbitCameraController0()","line":"48","kind":"constructor"}],"line":"23","kind":"class"},{"superclass":{"refId":"spectre/CameraController","name":"CameraController"},"uri":"package:spectre/src/spectre/fps_fly_camera_controller.dart","name":"FpsFlyCameraController","id":"FpsFlyCameraController","children":[{"returnType":{"refId":"void","name":"void"},"name":"updateCamera","id":"updateCamera2()","children":[{"ref":{"refId":"dart.core/num","name":"num"},"name":"seconds","id":"seconds","kind":"param"},{"ref":{"refId":"spectre/Camera","name":"Camera"},"name":"cam","id":"cam","kind":"param"}],"line":"54","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"_MoveFloat","isPrivate":true,"id":"_MoveFloat4()","children":[{"ref":{"refId":"dart.core/num","name":"num"},"name":"dt","id":"dt","kind":"param"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"positive","id":"positive","kind":"param"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"negative","id":"negative","kind":"param"},{"ref":{"refId":"spectre/Camera","name":"Camera"},"name":"cam","id":"cam","kind":"param"}],"line":"61","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"_MoveStrafe","isPrivate":true,"id":"_MoveStrafe4()","children":[{"ref":{"refId":"dart.core/num","name":"num"},"name":"dt","id":"dt","kind":"param"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"positive","id":"positive","kind":"param"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"negative","id":"negative","kind":"param"},{"ref":{"refId":"spectre/Camera","name":"Camera"},"name":"cam","id":"cam","kind":"param"}],"line":"79","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"_MoveForward","isPrivate":true,"id":"_MoveForward4()","children":[{"ref":{"refId":"dart.core/num","name":"num"},"name":"dt","id":"dt","kind":"param"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"positive","id":"positive","kind":"param"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"negative","id":"negative","kind":"param"},{"ref":{"refId":"spectre/Camera","name":"Camera"},"name":"cam","id":"cam","kind":"param"}],"line":"100","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"_RotateView","isPrivate":true,"id":"_RotateView2()","children":[{"ref":{"refId":"dart.core/num","name":"num"},"name":"dt","id":"dt","kind":"param"},{"ref":{"refId":"spectre/Camera","name":"Camera"},"name":"cam","id":"cam","kind":"param"}],"line":"120","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"_RotateEyeAndLook","isPrivate":true,"id":"_RotateEyeAndLook3()","children":[{"ref":{"refId":"dart.core/num","name":"num"},"name":"delta_angle","id":"delta_angle","kind":"param"},{"ref":{"refId":"vector_math/Vector3","name":"Vector3"},"name":"axis","id":"axis","kind":"param"},{"ref":{"refId":"spectre/Camera","name":"Camera"},"name":"cam","id":"cam","kind":"param"}],"line":"146","kind":"method"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"up","id":"up","line":"24","kind":"variable"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"down","id":"down","line":"25","kind":"variable"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"strafeLeft","id":"strafeLeft","line":"26","kind":"variable"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"strafeRight","id":"strafeRight","line":"27","kind":"variable"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"forward","id":"forward","line":"28","kind":"variable"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"backward","id":"backward","line":"29","kind":"variable"},{"ref":{"refId":"dart.core/num","name":"num"},"name":"floatVelocity","id":"floatVelocity","line":"31","kind":"variable"},{"ref":{"refId":"dart.core/num","name":"num"},"name":"strafeVelocity","id":"strafeVelocity","line":"32","kind":"variable"},{"ref":{"refId":"dart.core/num","name":"num"},"name":"forwardVelocity","id":"forwardVelocity","line":"33","kind":"variable"},{"ref":{"refId":"dart.core/num","name":"num"},"name":"mouseSensitivity","id":"mouseSensitivity","line":"34","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"accumDX","id":"accumDX","line":"36","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"accumDY","id":"accumDY","line":"37","kind":"variable"},{"name":"FpsFlyCameraController","id":"FpsFlyCameraController0()","line":"39","kind":"constructor"}],"line":"23","kind":"class"},{"interfaces":[{"refId":"spectre/Logger","name":"Logger"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"An implementation of [Logger] that appends to an HTML element","uri":"package:spectre/src/spectre/logger.dart","name":"HtmlLogger","id":"HtmlLogger","children":[{"returnType":{"refId":"void","name":"void"},"name":"_Append","isPrivate":true,"id":"_Append1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"a","id":"a","kind":"param"}],"line":"67","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"Error","id":"Error1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"e","id":"e","kind":"param"}],"line":"71","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"Warning","id":"Warning1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"w","id":"w","kind":"param"}],"line":"75","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"Info","id":"Info1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"i","id":"i","kind":"param"}],"line":"79","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"Log","id":"Log1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"i","id":"i","kind":"param"}],"line":"83","kind":"method"},{"ref":{"refId":"dart.dom.html/Element","name":"Element"},"name":"_logElement","isPrivate":true,"id":"_logElement","line":"60","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"_line_num","isPrivate":true,"id":"_line_num","line":"61","kind":"variable"},{"comment":"element is the CSS id of the HTML element to log into","name":"HtmlLogger","id":"HtmlLogger1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"element","id":"element","kind":"param"}],"line":"63","kind":"constructor"}],"line":"59","kind":"class"},{"interfaces":[{"refId":"spectre/Logger","name":"Logger"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"An implementation of [Logger] that does nothing","uri":"package:spectre/src/spectre/logger.dart","name":"NullLogger","id":"NullLogger","children":[{"returnType":{"refId":"void","name":"void"},"name":"Error","id":"Error1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"e","id":"e","kind":"param"}],"line":"50","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"Warning","id":"Warning1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"w","id":"w","kind":"param"}],"line":"52","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"Info","id":"Info1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"i","id":"i","kind":"param"}],"line":"54","kind":"method"}],"line":"49","kind":"class"},{"interfaces":[{"refId":"spectre/Logger","name":"Logger"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"An implementation of [Logger] that calls print","uri":"package:spectre/src/spectre/logger.dart","name":"PrintLogger","id":"PrintLogger","children":[{"returnType":{"refId":"void","name":"void"},"name":"Error","id":"Error1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"e","id":"e","kind":"param"}],"line":"35","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"Warning","id":"Warning1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"w","id":"w","kind":"param"}],"line":"39","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"Info","id":"Info1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"i","id":"i","kind":"param"}],"line":"43","kind":"method"}],"line":"34","kind":"class"},{"isAbstract":true,"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"Spectre Logging interface","uri":"package:spectre/src/spectre/logger.dart","name":"Logger","id":"Logger","children":[{"returnType":{"refId":"void","name":"void"},"name":"Error","id":"Error1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"e","id":"e","kind":"param"}],"line":"26","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"Warning","id":"Warning1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"w","id":"w","kind":"param"}],"line":"28","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"Info","id":"Info1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"i","id":"i","kind":"param"}],"line":"30","kind":"method"}],"kind":"class"},{"superclass":{"refId":"spectre/DeviceChild","name":"DeviceChild"},"uri":"package:spectre/src/spectre/input_layout.dart","name":"InputLayout","id":"InputLayout","children":[{"isSetter":true,"comment":"Set the shader program. Input layout will be verified to be [ready]. ","name":"shaderProgram=","id":"shaderProgram=1()","children":[{"ref":{"refId":"spectre/ShaderProgram","name":"ShaderProgram"},"name":"shaderProgram","id":"shaderProgram","kind":"param"}],"line":"33","kind":"method"},{"isSetter":true,"comment":"Set the mesh. Input layout will be verified to be [ready]. ","name":"mesh=","id":"mesh=1()","children":[{"ref":{"refId":"spectre/SpectreMesh","name":"SpectreMesh"},"name":"mesh","id":"mesh","kind":"param"}],"line":"41","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"_refresh","isPrivate":true,"id":"_refresh0()","line":"52","kind":"method"},{"ref":{"refId":"spectre/ShaderProgram","name":"ShaderProgram"},"name":"shaderProgram","id":"shaderProgram","line":"31","kind":"property"},{"ref":{"refId":"spectre/SpectreMesh","name":"SpectreMesh"},"name":"mesh","id":"mesh","line":"39","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"In order for a InputLayout to be ready the mesh must have\nall the attributes the shader program requires.\n","name":"ready","id":"ready","line":"49","kind":"property"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"spectre/VertexAttribute","name":"VertexAttribute"}],"name":"List"},"isFinal":true,"comment":"List of active attributes. ","name":"attributes","id":"attributes","line":"25","kind":"variable"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"spectre/ShaderProgramAttribute","name":"ShaderProgramAttribute"}],"name":"List"},"isFinal":true,"comment":"List of attributes expected by the shader but missing from the mesh. ","name":"missingAttributes","id":"missingAttributes","line":"27","kind":"variable"},{"ref":{"refId":"spectre/ShaderProgram","name":"ShaderProgram"},"name":"_shaderProgram","isPrivate":true,"id":"_shaderProgram","line":"30","kind":"variable"},{"ref":{"refId":"spectre/SpectreMesh","name":"SpectreMesh"},"name":"_mesh","isPrivate":true,"id":"_mesh","line":"38","kind":"variable"},{"name":"InputLayout","id":"InputLayout2()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"name","id":"name","kind":"param"},{"ref":{"refId":"spectre/GraphicsDevice","name":"GraphicsDevice"},"name":"device","id":"device","kind":"param"}],"line":"83","kind":"constructor"}],"line":"23","kind":"class"},{"superclass":{"refId":"spectre/SpectreBuffer","name":"SpectreBuffer"},"comment":"IndexBuffer","uri":"package:spectre/src/spectre/index_buffer.dart","name":"IndexBuffer","id":"IndexBuffer","children":[{"name":"IndexBuffer","id":"IndexBuffer2()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"name","id":"name","kind":"param"},{"ref":{"refId":"spectre/GraphicsDevice","name":"GraphicsDevice"},"name":"device","id":"device","kind":"param"}],"line":"25","kind":"constructor"}],"kind":"class"},{"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"Specifies the configuration of the [GraphicsDevice].\n\nWhen creating a [WebGL.RenderingContext] there are various options that\ncan be passed in to specify the configuration. These options can only be\nspecified when the\n[GraphicsDevice] is created. Afterwards they cannot be modified.\n\nIt should be noted that the underlying WebGL implementation takes these\nvalues as a suggestion. If the underlying hardware does not support the\nconfiguration it will be ignored. After creating the [GraphicsDevice] the\n[GraphicsDeviceCapabilities] should be queried directly.\n\n    GraphicsDeviceConfig config = new GraphicsDeviceConfig();\n    config.stencilBuffer = true;\n\n    GraphicsDevice device = new GraphicsDevice(surface, config);\n    print('Has stencil ${device.capabilities.stencilBuffer}');","uri":"package:spectre/src/spectre/graphics_device_config.dart","name":"GraphicsDeviceConfig","id":"GraphicsDeviceConfig","children":[{"isSetter":true,"name":"stencilBuffer=","id":"stencilBuffer=1()","children":[{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"value","id":"value","kind":"param"}],"line":"66","kind":"method"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"Whether a stencil buffer should be created.","name":"stencilBuffer","id":"stencilBuffer","line":"65","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"Whether a stencil buffer should be used.","name":"_stencilBuffer","isPrivate":true,"id":"_stencilBuffer","line":"46","kind":"variable"},{"comment":"Creates an instance of the [GraphicsDeviceConfig] class.\n\nThe default values of [WebGL.ContextAttributes] are used.\n\n   GraphicsDeviceConfig config = new GraphicsDeviceConfig();\n   config.stencil = false;","name":"GraphicsDeviceConfig","id":"GraphicsDeviceConfig0()","line":"58","kind":"constructor"}],"line":"40","kind":"class"},{"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"Allows the querying of the capabilities of the [GraphicsDevice].\n\nCan be used to get maximum values for the underlying WebGL implementation as\nwell as access what WebGL extensions are available.","uri":"package:spectre/src/spectre/graphics_device_capabilities.dart","name":"GraphicsDeviceCapabilities","id":"GraphicsDeviceCapabilities","children":[{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"Returns a string representation of this object.","name":"toString","id":"toString0()","line":"200","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Queries context info using the [WebGL.RenderingContext].","name":"_queryDeviceContext","isPrivate":true,"id":"_queryDeviceContext1()","children":[{"ref":{"refId":"dart.dom.web_gl/RenderingContext","name":"RenderingContext"},"name":"gl","id":"gl","kind":"param"}],"line":"243","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Queries device info using the [WebGL.RenderingContext].","name":"_queryDeviceInfo","isPrivate":true,"id":"_queryDeviceInfo1()","children":[{"ref":{"refId":"dart.dom.web_gl/RenderingContext","name":"RenderingContext"},"name":"gl","id":"gl","kind":"param"}],"line":"251","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Queries extensions using the [WebGL.RenderingContext].","name":"_queryExtensionInfo","isPrivate":true,"id":"_queryExtensionInfo1()","children":[{"ref":{"refId":"dart.dom.web_gl/RenderingContext","name":"RenderingContext"},"name":"gl","id":"gl","kind":"param"}],"line":"269","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"isStatic":true,"comment":"Queries the [WebGL.RenderingContext] to see if the given extension is\navailable.","name":"_hasExtension","isPrivate":true,"id":"_hasExtension2()","children":[{"ref":{"refId":"dart.dom.web_gl/RenderingContext","name":"RenderingContext"},"name":"gl","id":"gl","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"name":"name","id":"name","kind":"param"}],"line":"307","kind":"method"},{"returnType":{"refId":"dart.core/Object","name":"Object"},"isStatic":true,"comment":"Queries the [WebGL.RenderingContext] to retrieve the given extension.\n\nReturns [null] if the extension is not supported.","name":"_getExtension","isPrivate":true,"id":"_getExtension2()","children":[{"ref":{"refId":"dart.dom.web_gl/RenderingContext","name":"RenderingContext"},"name":"gl","id":"gl","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"name":"name","id":"name","kind":"param"}],"line":"314","kind":"method"},{"ref":{"refId":"dart.core/String","name":"String"},"comment":"The graphics card vendor","name":"vendor","id":"vendor","line":"137","kind":"property"},{"ref":{"refId":"dart.core/String","name":"String"},"comment":"The renderer","name":"renderer","id":"renderer","line":"139","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"Whether a depth buffer is available.","name":"depthBuffer","id":"depthBuffer","line":"141","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"Whether a stencil buffer is available.","name":"stencilBuffer","id":"stencilBuffer","line":"143","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"The number of texture units available.","name":"textureUnits","id":"textureUnits","line":"145","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"The number of texture units available in the vertex shader","name":"vertexShaderTextureUnits","id":"vertexShaderTextureUnits","line":"147","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"The largest texture size available.","name":"maxTextureSize","id":"maxTextureSize","line":"149","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"The largest cube map texture size available.","name":"maxCubeMapTextureSize","id":"maxCubeMapTextureSize","line":"151","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"The largest anisotropy level available.","name":"maxAnisotropyLevel","id":"maxAnisotropyLevel","line":"153","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"Maximum number of vertex attributes available.","name":"maxVertexAttribs","id":"maxVertexAttribs","line":"155","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"Maximum number of varying vectors available in the shader program.","name":"maxVaryingVectors","id":"maxVaryingVectors","line":"157","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"Maximum number of uniforms available in the vertex shader.","name":"maxVertexShaderUniforms","id":"maxVertexShaderUniforms","line":"159","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"Maximum number of uniforms available in the fragment shader.","name":"maxFragmentShaderUniforms","id":"maxFragmentShaderUniforms","line":"161","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"Whether floating point textures are available.","name":"hasFloatTextures","id":"hasFloatTextures","line":"164","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"Whether half-floating point textures are available.","name":"hasHalfFloatTextures","id":"hasHalfFloatTextures","line":"166","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"Whether standard derivatives (dFdx, dFdy, fwidth) are available in the\nfragment shader.","name":"hasStandardDerivatives","id":"hasStandardDerivatives","line":"169","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"Whether vertex array objects are available.","name":"hasVertexArrayObjects","id":"hasVertexArrayObjects","line":"171","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"Whether the renderer and vendor can be queried for debug purposes.","name":"hasDebugRendererInfo","id":"hasDebugRendererInfo","line":"173","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"Whether the translated shader source can be viewed.","name":"hasDebugShaders","id":"hasDebugShaders","line":"175","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"Whether unsigned int can be used as an index.","name":"hasUnsignedIntIndices","id":"hasUnsignedIntIndices","line":"177","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"Whether anisotropic filtering is available.","name":"hasAnisotropicFiltering","id":"hasAnisotropicFiltering","line":"179","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"Whether context losing/restoring can be simulated.","name":"canLoseContext","id":"canLoseContext","line":"181","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"Whether S3TC compressed textures can be used.","name":"hasCompressedTextureS3TC","id":"hasCompressedTextureS3TC","line":"183","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"Whether depth textures can be used.","name":"hasDepthTextures","id":"hasDepthTextures","line":"185","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"Whether ATC compressed textures can be used.","name":"hasCompressedTextureATC","id":"hasCompressedTextureATC","line":"187","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"Whether PVRTC compressed textures can be used.","name":"hasCompressedTexturePVRTC","id":"hasCompressedTexturePVRTC","line":"189","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"Whether multiple render targets can be used.","name":"hasMultipleRenderTargets","id":"hasMultipleRenderTargets","line":"191","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"Whether instanced arrays can be used.","name":"hasInstancedArrays","id":"hasInstancedArrays","line":"193","kind":"property"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"List"},"isStatic":true,"comment":"Vendor extensions to use when searching for extensions.","name":"_vendorExtensions","isPrivate":true,"id":"_vendorExtensions","line":"33","kind":"variable"},{"ref":{"refId":"dart.core/String","name":"String"},"comment":"The graphics card vendor","name":"_vendor","isPrivate":true,"id":"_vendor","line":"40","kind":"variable"},{"ref":{"refId":"dart.core/String","name":"String"},"comment":"The renderer","name":"_renderer","isPrivate":true,"id":"_renderer","line":"42","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"The number of texture units available.","name":"_textureUnits","isPrivate":true,"id":"_textureUnits","line":"44","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"The number of texture units available in the vertex shader","name":"_vertexShaderTextureUnits","isPrivate":true,"id":"_vertexShaderTextureUnits","line":"46","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"The largest texture size available.","name":"_maxTextureSize","isPrivate":true,"id":"_maxTextureSize","line":"48","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"The largest cube map texture size available.","name":"_maxCubeMapTextureSize","isPrivate":true,"id":"_maxCubeMapTextureSize","line":"50","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"The largest anisotropy level available.","name":"_maxAnisotropyLevel","isPrivate":true,"id":"_maxAnisotropyLevel","line":"52","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"Maximum number of vertex attributes available.","name":"_maxVertexAttribs","isPrivate":true,"id":"_maxVertexAttribs","line":"54","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"Maximum number of varying vectors available in the shader program.","name":"_maxVaryingVectors","isPrivate":true,"id":"_maxVaryingVectors","line":"56","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"Maximum number of uniforms available in the vertex shader.","name":"_maxVertexShaderUniforms","isPrivate":true,"id":"_maxVertexShaderUniforms","line":"58","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"Maximum number of uniforms available in the fragment shader.","name":"_maxFragmentShaderUniforms","isPrivate":true,"id":"_maxFragmentShaderUniforms","line":"60","kind":"variable"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"Whether a depth buffer is available.","name":"_depthBuffer","isPrivate":true,"id":"_depthBuffer","line":"67","kind":"variable"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"Whether a stencil buffer is available.","name":"_stencilBuffer","isPrivate":true,"id":"_stencilBuffer","line":"69","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"The size of the depth buffer in bits.","name":"_depthBufferSize","isPrivate":true,"id":"_depthBufferSize","line":"71","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"The size of the stencil buffer in bits.","name":"_stencilBufferSize","isPrivate":true,"id":"_stencilBufferSize","line":"73","kind":"variable"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"Whether floating point textures are available.","name":"_floatTextures","isPrivate":true,"id":"_floatTextures","line":"80","kind":"variable"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"Whether half-floating point textures are available.","name":"_halfFloatTextures","isPrivate":true,"id":"_halfFloatTextures","line":"82","kind":"variable"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"Whether standard derivatives (dFdx, dFdy, fwidth) are available in the\nfragment shader.","name":"_standardDerivatives","isPrivate":true,"id":"_standardDerivatives","line":"85","kind":"variable"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"Whether vertex array objects are available.","name":"_vertexArrayObjects","isPrivate":true,"id":"_vertexArrayObjects","line":"87","kind":"variable"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"Whether the renderer and vendor can be queried for debug purposes.","name":"_debugRendererInfo","isPrivate":true,"id":"_debugRendererInfo","line":"89","kind":"variable"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"Whether the translated shader source can be viewed.","name":"_debugShaders","isPrivate":true,"id":"_debugShaders","line":"91","kind":"variable"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"Whether unsigned int can be used as an index.","name":"_unsignedIntIndices","isPrivate":true,"id":"_unsignedIntIndices","line":"93","kind":"variable"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"Whether anisotropic filtering is available.","name":"_anisotropicFiltering","isPrivate":true,"id":"_anisotropicFiltering","line":"95","kind":"variable"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"Whether context losing/restoring can be simulated.","name":"_loseContext","isPrivate":true,"id":"_loseContext","line":"97","kind":"variable"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"Whether S3TC compressed textures can be used.","name":"_compressedTextureS3TC","isPrivate":true,"id":"_compressedTextureS3TC","line":"99","kind":"variable"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"Whether depth textures can be used.","name":"_depthTextures","isPrivate":true,"id":"_depthTextures","line":"101","kind":"variable"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"Whether ATC compressed textures can be used.","name":"_compressedTextureATC","isPrivate":true,"id":"_compressedTextureATC","line":"103","kind":"variable"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"Whether PVRTC compressed textures can be used.","name":"_compressedTexturePVRTC","isPrivate":true,"id":"_compressedTexturePVRTC","line":"105","kind":"variable"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"Whether multiple render targets can be used.","name":"_multipleRenderTargets","isPrivate":true,"id":"_multipleRenderTargets","line":"107","kind":"variable"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"Whether instanced arrays can be used.","name":"_instancedArrays","isPrivate":true,"id":"_instancedArrays","line":"109","kind":"variable"},{"comment":"Queries the device capabilities in the [WebGL.RenderingContext].","name":"GraphicsDeviceCapabilities._fromContext","isPrivate":true,"id":"GraphicsDeviceCapabilities._fromContext1()","children":[{"ref":{"refId":"dart.dom.web_gl/RenderingContext","name":"RenderingContext"},"name":"gl","id":"gl","kind":"param"}],"line":"116","kind":"constructor"}],"line":"27","kind":"class"},{"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"Spectre GPU Device","uri":"package:spectre/src/spectre/graphics_device.dart","name":"GraphicsDevice","id":"GraphicsDevice","children":[{"returnType":{"refId":"void","name":"void"},"name":"_addChild","isPrivate":true,"id":"_addChild1()","children":[{"ref":{"refId":"spectre/DeviceChild","name":"DeviceChild"},"name":"child","id":"child","kind":"param"}],"line":"41","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"_removeChild","isPrivate":true,"id":"_removeChild1()","children":[{"ref":{"refId":"spectre/DeviceChild","name":"DeviceChild"},"name":"child","id":"child","kind":"param"}],"line":"48","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"_drawSquare","isPrivate":true,"id":"_drawSquare5()","children":[{"ref":{"refId":"dart.dom.html/CanvasRenderingContext2D","name":"CanvasRenderingContext2D"},"name":"context2d","id":"context2d","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"x","id":"x","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"y","id":"y","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"w","id":"w","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"h","id":"h","line":"56","kind":"param"}],"line":"55","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"_drawGrid","isPrivate":true,"id":"_drawGrid5()","children":[{"ref":{"refId":"dart.dom.html/CanvasRenderingContext2D","name":"CanvasRenderingContext2D"},"name":"context2d","id":"context2d","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"width","id":"width","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"height","id":"height","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"horizSlices","id":"horizSlices","line":"66","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"vertSlices","id":"vertSlices","line":"66","kind":"param"}],"line":"65","kind":"method"},{"ref":{"refId":"spectre/GraphicsContext","name":"GraphicsContext"},"name":"context","id":"context","line":"27","kind":"property"},{"ref":{"refId":"spectre/GraphicsDeviceCapabilities","name":"GraphicsDeviceCapabilities"},"name":"capabilities","id":"capabilities","line":"30","kind":"property"},{"ref":{"refId":"dart.dom.web_gl/RenderingContext","name":"RenderingContext"},"name":"gl","id":"gl","line":"33","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"canvasWidth","id":"canvasWidth","line":"35","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"canvasHeight","id":"canvasHeight","line":"36","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"frontBufferWidth","id":"frontBufferWidth","line":"37","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"frontBufferHeight","id":"frontBufferHeight","line":"38","kind":"property"},{"ref":{"refId":"dart.dom.html/CanvasElement","name":"CanvasElement"},"name":"_surface","isPrivate":true,"id":"_surface","line":"25","kind":"variable"},{"ref":{"refId":"spectre/GraphicsContext","name":"GraphicsContext"},"name":"_context","isPrivate":true,"id":"_context","line":"26","kind":"variable"},{"ref":{"refId":"spectre/GraphicsDeviceCapabilities","name":"GraphicsDeviceCapabilities"},"name":"_capabilities","isPrivate":true,"id":"_capabilities","line":"29","kind":"variable"},{"ref":{"refId":"dart.dom.web_gl/RenderingContext","name":"RenderingContext"},"name":"_gl","isPrivate":true,"id":"_gl","line":"32","kind":"variable"},{"ref":{"refId":"dart.core/Set","arguments":[{"refId":"spectre/DeviceChild","name":"DeviceChild"}],"name":"Set"},"isFinal":true,"name":"children","id":"children","line":"40","kind":"variable"},{"comment":"Initializes an instance of the [GraphicsDevice] class.\n\nA [WebGL.RenderingContext] is created from the given [surface].\nAdditionally an\noptional instance of [GraphicsDeviceConfig] can be passed in to control\nthe creation of the underlying frame buffer.","name":"GraphicsDevice","id":"GraphicsDevice2()","children":[{"ref":{"refId":"dart.dom.html/CanvasElement","name":"CanvasElement"},"name":"surface","id":"surface","kind":"param"},{"ref":{"refId":"spectre/GraphicsDeviceConfig","name":"GraphicsDeviceConfig"},"isOptional":true,"defaultValue":"null","name":"config","id":"config","kind":"param"}],"line":"89","kind":"constructor"}],"kind":"class"},{"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"The [GraphicsContext] configures the GPU pipeline and executes draw commands.","uri":"package:spectre/src/spectre/graphics_context.dart","name":"GraphicsContext","id":"GraphicsContext","children":[{"returnType":{"refId":"void","name":"void"},"comment":"Initialize the WebGL pipeline state.\nCreates all the default state values and applies them to the pipeline.","name":"_initializeState","isPrivate":true,"id":"_initializeState0()","line":"86","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"_prepareInputs","isPrivate":true,"id":"_prepareInputs1()","children":[{"isNamed":true,"ref":{"refId":"dart.core/bool","name":"bool"},"isOptional":true,"defaultValue":"false","name":"debug","id":"debug","kind":"param"}],"line":"140","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"_prepareTextures","isPrivate":true,"id":"_prepareTextures0()","line":"192","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Resets the cached GPU pipeline state","name":"reset","id":"reset0()","line":"210","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Configure the primitive topology","name":"setPrimitiveTopology","id":"setPrimitiveTopology1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"topology","id":"topology","kind":"param"}],"line":"240","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Set the IndexBuffer to [indexBufferHandle]","name":"setIndexBuffer","id":"setIndexBuffer1()","children":[{"ref":{"refId":"spectre/IndexBuffer","name":"IndexBuffer"},"name":"indexBufferHandle","id":"indexBufferHandle","kind":"param"}],"line":"245","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Set multiple VertexBuffers in [vertexBufferHandles] starting at [startSlot]","name":"setVertexBuffers","id":"setVertexBuffers2()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"startSlot","id":"startSlot","kind":"param"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"spectre/VertexBuffer","name":"VertexBuffer"}],"name":"List"},"name":"vertexBufferHandles","id":"vertexBufferHandles","kind":"param"}],"line":"250","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Set InputLayout to [inputLayoutHandle]","name":"setInputLayout","id":"setInputLayout1()","children":[{"ref":{"refId":"spectre/InputLayout","name":"InputLayout"},"name":"inputLayoutHandle","id":"inputLayoutHandle","kind":"param"}],"line":"258","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"setIndexedMesh","id":"setIndexedMesh1()","children":[{"ref":{"refId":"spectre/SingleArrayIndexedMesh","name":"SingleArrayIndexedMesh"},"name":"indexedMesh","id":"indexedMesh","kind":"param"}],"line":"262","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"setMesh","id":"setMesh1()","children":[{"ref":{"refId":"spectre/SingleArrayMesh","name":"SingleArrayMesh"},"name":"mesh","id":"mesh","kind":"param"}],"line":"271","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Set ShaderProgram to [shaderProgramHandle]","name":"setShaderProgram","id":"setShaderProgram1()","children":[{"ref":{"refId":"spectre/ShaderProgram","name":"ShaderProgram"},"name":"shaderProgramHandle","id":"shaderProgramHandle","kind":"param"}],"line":"281","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Sets a [Viewport] identifying the portion of the render target to receive draw calls.","name":"setViewport","id":"setViewport1()","children":[{"ref":{"refId":"spectre/Viewport","name":"Viewport"},"name":"viewport","id":"viewport","kind":"param"}],"line":"291","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Sets the current [BlendState] to use on the pipeline.\n\nIf [blendState] is null all values of the pipeline associated with blending\nwill be reset to their defaults.","name":"setBlendState","id":"setBlendState1()","children":[{"ref":{"refId":"spectre/BlendState","name":"BlendState"},"name":"blendState","id":"blendState","kind":"param"}],"line":"321","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Sets the current [DepthState] to use on the pipeline.\n\nIf [depthState] is null all values of the pipeline associated with depth\nwill be reset to their defaults.","name":"setDepthState","id":"setDepthState1()","children":[{"ref":{"refId":"spectre/DepthState","name":"DepthState"},"name":"depthState","id":"depthState","kind":"param"}],"line":"413","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Sets the current [RasterizerState] to use on the pipeline.\n\nIf [rasterizerState] is null all values of the pipeline associated with rasterization\nwill be reset to their defaults.","name":"setRasterizerState","id":"setRasterizerState1()","children":[{"ref":{"refId":"spectre/RasterizerState","name":"RasterizerState"},"name":"rasterizerState","id":"rasterizerState","kind":"param"}],"line":"445","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Set RenderTarget to [renderTargetHandle]","name":"setRenderTarget","id":"setRenderTarget1()","children":[{"ref":{"refId":"spectre/RenderTarget","name":"RenderTarget"},"name":"renderTargetHandle","id":"renderTargetHandle","kind":"param"}],"line":"519","kind":"method"},{"returnType":{"refId":"spectre/ShaderProgramUniform","name":"ShaderProgramUniform"},"name":"_findUniform","isPrivate":true,"id":"_findUniform1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"name","id":"name","kind":"param"}],"line":"524","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"setConstant","id":"setConstant2()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"name","id":"name","kind":"param"},{"name":"argument","id":"argument","kind":"param"}],"line":"532","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"clearColorBuffer","id":"clearColorBuffer4()","children":[{"ref":{"refId":"dart.core/num","name":"num"},"name":"r","id":"r","kind":"param"},{"ref":{"refId":"dart.core/num","name":"num"},"name":"g","id":"g","kind":"param"},{"ref":{"refId":"dart.core/num","name":"num"},"name":"b","id":"b","kind":"param"},{"ref":{"refId":"dart.core/num","name":"num"},"name":"a","id":"a","kind":"param"}],"line":"543","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"clearDepthBuffer","id":"clearDepthBuffer1()","children":[{"ref":{"refId":"dart.core/num","name":"num"},"name":"depth","id":"depth","kind":"param"}],"line":"548","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"clearStencilBuffer","id":"clearStencilBuffer1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"stencil","id":"stencil","kind":"param"}],"line":"553","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Sets a list of [textureHandles] starting at [texUnitOffset]","name":"setTextures","id":"setTextures2()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"texUnitOffset","id":"texUnitOffset","kind":"param"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"spectre/SpectreTexture","name":"SpectreTexture"}],"name":"List"},"name":"textureHandles","id":"textureHandles","kind":"param"}],"line":"559","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Sets a list of [samplerHandles] starting at [texUnitOffset]","name":"setSamplers","id":"setSamplers2()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"texUnitOffset","id":"texUnitOffset","kind":"param"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"spectre/SamplerState","name":"SamplerState"}],"name":"List"},"name":"samplerHandles","id":"samplerHandles","kind":"param"}],"line":"566","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Draw an indexed mesh with [numIndices] starting at [indexOffset]","name":"drawIndexed","id":"drawIndexed2()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"numIndices","id":"numIndices","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"indexOffset","id":"indexOffset","kind":"param"}],"line":"573","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"drawIndexedMesh","id":"drawIndexedMesh1()","children":[{"ref":{"refId":"spectre/SingleArrayIndexedMesh","name":"SingleArrayIndexedMesh"},"name":"indexedMesh","id":"indexedMesh","kind":"param"}],"line":"583","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"drawMesh","id":"drawMesh1()","children":[{"ref":{"refId":"spectre/SingleArrayMesh","name":"SingleArrayMesh"},"name":"mesh","id":"mesh","kind":"param"}],"line":"590","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Draw a mesh with [numVertices] starting at [vertexOffset]","name":"draw","id":"draw2()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"numVertices","id":"numVertices","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"vertexOffset","id":"vertexOffset","kind":"param"}],"line":"598","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"isFinal":true,"isStatic":true,"name":"numVertexBuffers","id":"numVertexBuffers","line":"25","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isFinal":true,"isStatic":true,"name":"numTextures","id":"numTextures","line":"26","kind":"variable"},{"ref":{"refId":"spectre/GraphicsDevice","name":"GraphicsDevice"},"isFinal":true,"name":"device","id":"device","line":"27","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"_primitiveTopology","isPrivate":true,"id":"_primitiveTopology","line":"30","kind":"variable"},{"ref":{"refId":"spectre/IndexBuffer","name":"IndexBuffer"},"name":"_indexBufferHandle","isPrivate":true,"id":"_indexBufferHandle","line":"31","kind":"variable"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"spectre/VertexBuffer","name":"VertexBuffer"}],"name":"List"},"name":"_vertexBufferHandles","isPrivate":true,"id":"_vertexBufferHandles","line":"32","kind":"variable"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"},"name":"_enabledVertexAttributeArrays","isPrivate":true,"id":"_enabledVertexAttributeArrays","line":"33","kind":"variable"},{"ref":{"refId":"spectre/InputLayout","name":"InputLayout"},"name":"_inputLayoutHandle","isPrivate":true,"id":"_inputLayoutHandle","line":"34","kind":"variable"},{"ref":{"refId":"spectre/InputLayout","name":"InputLayout"},"name":"_preparedInputLayoutHandle","isPrivate":true,"id":"_preparedInputLayoutHandle","line":"35","kind":"variable"},{"ref":{"refId":"spectre/ShaderProgram","name":"ShaderProgram"},"name":"_shaderProgramHandle","isPrivate":true,"id":"_shaderProgramHandle","line":"37","kind":"variable"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"spectre/SamplerState","name":"SamplerState"}],"name":"List"},"name":"_samplerStateHandles","isPrivate":true,"id":"_samplerStateHandles","line":"38","kind":"variable"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"spectre/SpectreTexture","name":"SpectreTexture"}],"name":"List"},"name":"_textureHandles","isPrivate":true,"id":"_textureHandles","line":"39","kind":"variable"},{"ref":{"refId":"spectre/StencilState","name":"StencilState"},"name":"_stencilStateHandle","isPrivate":true,"id":"_stencilStateHandle","line":"40","kind":"variable"},{"ref":{"refId":"spectre/RenderTarget","name":"RenderTarget"},"name":"_renderTargetHandle","isPrivate":true,"id":"_renderTargetHandle","line":"41","kind":"variable"},{"ref":{"refId":"spectre/BlendState","name":"BlendState"},"comment":"The default [BlendState] to use.\nConstructed with the values in [BlendState.opaque].","name":"_blendStateDefault","isPrivate":true,"id":"_blendStateDefault","line":"49","kind":"variable"},{"ref":{"refId":"spectre/DepthState","name":"DepthState"},"comment":"The default [DepthState] to use.\nConstructed with the values in [DepthState.depthWrite].","name":"_depthStateDefault","isPrivate":true,"id":"_depthStateDefault","line":"52","kind":"variable"},{"ref":{"refId":"spectre/RasterizerState","name":"RasterizerState"},"comment":"The default [RasterizerState] to use.\nConstructed with the values in [RasterizerState.cullClockwise].","name":"_rasterizerStateDefault","isPrivate":true,"id":"_rasterizerStateDefault","line":"55","kind":"variable"},{"ref":{"refId":"spectre/Viewport","name":"Viewport"},"comment":"The current [Viewport] of the pipeline.","name":"_viewport","isPrivate":true,"id":"_viewport","line":"62","kind":"variable"},{"ref":{"refId":"spectre/BlendState","name":"BlendState"},"comment":"The current [BlendState] of the pipeline.","name":"_blendState","isPrivate":true,"id":"_blendState","line":"64","kind":"variable"},{"ref":{"refId":"spectre/DepthState","name":"DepthState"},"comment":"The current [DepthState] of the pipeline.","name":"_depthState","isPrivate":true,"id":"_depthState","line":"66","kind":"variable"},{"ref":{"refId":"spectre/RasterizerState","name":"RasterizerState"},"comment":"The current [RasterizerState] of the pipeline.","name":"_rasterizerState","isPrivate":true,"id":"_rasterizerState","line":"68","kind":"variable"},{"name":"GraphicsContext","id":"GraphicsContext1()","children":[{"initializedField":{"refId":"spectre/GraphicsContext/device","name":"device"},"ref":{"refId":"spectre/GraphicsDevice","name":"GraphicsDevice"},"name":"device","id":"device","kind":"param"}],"line":"74","kind":"constructor"}],"kind":"class"},{"superclass":{"refId":"spectre/Enum","name":"Enum"},"comment":"Defines the winding used to determine whether a triangle is front or\nback facing.","uri":"package:spectre/src/spectre/front_face.dart","name":"FrontFace","id":"FrontFace","children":[{"returnType":{"refId":"dart.core/int","name":"int"},"isStatic":true,"comment":"Convert a [String] to a [FrontFace].","name":"parse","id":"parse1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"name","id":"name","kind":"param"}],"line":"37","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"isStatic":true,"comment":"Convert a [FrontFace] to a [String].","name":"stringify","id":"stringify1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"value","id":"value","kind":"param"}],"line":"39","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"isStatic":true,"comment":"Checks whether the value is a valid enumeration.","name":"isValid","id":"isValid1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"value","id":"value","kind":"param"}],"line":"41","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"comment":"Triangles are considered front-facing if its vertices are clockwise.","name":"Clockwise","id":"Clockwise","line":"27","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"comment":"Triangles are considered front-facing if its vertices are counter-clockwise.","name":"CounterClockwise","id":"CounterClockwise","line":"29","kind":"variable"},{"ref":{"refId":"dart.core/Map","arguments":[{"refId":"dart.core/String","name":"String"},{"refId":"dart.core/int","name":"int"}],"name":"Map"},"isStatic":true,"name":"_values","isPrivate":true,"id":"_values","line":"31","kind":"variable"}],"line":"25","kind":"class"},{"superclass":{"refId":"spectre/SpectreShader","name":"SpectreShader"},"comment":"FragmentShader","uri":"package:spectre/src/spectre/fragment_shader.dart","name":"FragmentShader","id":"FragmentShader","children":[{"name":"FragmentShader","id":"FragmentShader2()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"name","id":"name","kind":"param"},{"ref":{"refId":"spectre/GraphicsDevice","name":"GraphicsDevice"},"name":"device","id":"device","kind":"param"}],"line":"25","kind":"constructor"}],"kind":"class"},{"superclass":{"refId":"spectre/DeviceChild","name":"DeviceChild"},"uri":"package:spectre/src/spectre/shader.dart","name":"SpectreShader","id":"SpectreShader","children":[{"returnType":{"refId":"void","name":"void"},"name":"finalize","id":"finalize0()","line":"33","kind":"method"},{"returnType":{"refId":"void","name":"void"},"isSetter":true,"comment":"Set shader source code. ","name":"source=","id":"source=1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"s","id":"s","kind":"param"}],"line":"40","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Compile the shader. ","name":"compile","id":"compile0()","line":"65","kind":"method"},{"ref":{"refId":"dart.core/String","name":"String"},"comment":"Get shader source code. ","name":"source","id":"source","line":"49","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"Shader successfully compiled? ","name":"compiled","id":"compiled","line":"54","kind":"property"},{"ref":{"refId":"dart.core/String","name":"String"},"comment":"Compile log. ","name":"compileLog","id":"compileLog","line":"70","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"isFinal":true,"name":"_type","isPrivate":true,"id":"_type","line":"24","kind":"variable"},{"ref":{"refId":"dart.core/String","name":"String"},"name":"_source","isPrivate":true,"id":"_source","line":"25","kind":"variable"},{"ref":{"refId":"dart.dom.web_gl/Shader","name":"Shader"},"name":"_shader","isPrivate":true,"id":"_shader","line":"26","kind":"variable"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"Enable or disable automatic shader recompilation when source changes.  ","name":"autoCompile","id":"autoCompile","line":"62","kind":"variable"},{"name":"SpectreShader","id":"SpectreShader3()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"name","id":"name","kind":"param"},{"ref":{"refId":"spectre/GraphicsDevice","name":"GraphicsDevice"},"name":"device","id":"device","kind":"param"},{"initializedField":{"refId":"spectre/SpectreShader/_type","name":"_type"},"ref":{"refId":"dart.core/int","name":"int"},"name":"_type","isPrivate":true,"id":"_type","kind":"param"}],"line":"28","kind":"constructor"}],"line":"23","kind":"class"},{"superclass":{"refId":"dart.core/Object","name":"Object"},"uri":"package:spectre/src/spectre/enum.dart","name":"Enum","id":"Enum","children":[{"returnType":{"refId":"dart.core/int","name":"int"},"isStatic":true,"comment":"Convert from a [String] name to the corresponding enumeration value.","name":"_parse","isPrivate":true,"id":"_parse2()","children":[{"ref":{"refId":"dart.core/Map","arguments":[{"refId":"dart.core/String","name":"String"},{"refId":"dart.core/int","name":"int"}],"name":"Map"},"name":"values","id":"values","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"name":"name","id":"name","kind":"param"}],"line":"25","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"isStatic":true,"comment":"Converts the enumeration value to a [String].","name":"_stringify","isPrivate":true,"id":"_stringify2()","children":[{"ref":{"refId":"dart.core/Map","arguments":[{"refId":"dart.core/String","name":"String"},{"refId":"dart.core/int","name":"int"}],"name":"Map"},"name":"values","id":"values","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"value","id":"value","kind":"param"}],"line":"32","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"isStatic":true,"comment":"Checks whether the value is a valid enumeration.","name":"_isValid","isPrivate":true,"id":"_isValid2()","children":[{"ref":{"refId":"dart.core/Map","arguments":[{"refId":"dart.core/String","name":"String"},{"refId":"dart.core/int","name":"int"}],"name":"Map"},"name":"values","id":"values","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"value","id":"value","kind":"param"}],"line":"46","kind":"method"}],"line":"23","kind":"class"},{"superclass":{"refId":"spectre/DeviceChild","name":"DeviceChild"},"comment":"Contains depth state for the device.\nSet using [GraphicsContext.setDepthState]","uri":"package:spectre/src/spectre/depth_state.dart","name":"DepthState","id":"DepthState","children":[{"isSetter":true,"name":"depthBufferEnabled=","id":"depthBufferEnabled=1()","children":[{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"value","id":"value","kind":"param"}],"line":"84","kind":"method"},{"isSetter":true,"name":"depthBufferWriteEnabled=","id":"depthBufferWriteEnabled=1()","children":[{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"value","id":"value","kind":"param"}],"line":"89","kind":"method"},{"isSetter":true,"name":"depthBufferFunction=","id":"depthBufferFunction=1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"value","id":"value","kind":"param"}],"line":"94","kind":"method"},{"comment":"Serializes the [BlendState] to a JSON.","name":"toJson","id":"toJson0()","line":"107","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Deserializes the [BlendState] from a JSON.","name":"fromJson","id":"fromJson1()","children":[{"ref":{"refId":"dart.core/Map","name":"Map"},"name":"values","id":"values","kind":"param"}],"line":"119","kind":"method"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"Whether depth buffering is enabled or disabled.\nThe default is true.","name":"depthBufferEnabled","id":"depthBufferEnabled","line":"83","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"Whether writing to the depth buffer is enabled or disabled.\nThe default is true.","name":"depthBufferWriteEnabled","id":"depthBufferWriteEnabled","line":"88","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"The comparison function for the depth-buffer test.\nThe default is CompareFunction.LessEqual","name":"depthBufferFunction","id":"depthBufferFunction","line":"93","kind":"property"},{"ref":{"refId":"dart.core/String","name":"String"},"isStatic":true,"comment":"Serialization name for [depthBufferEnabled].","name":"_depthBufferEnabledName","isPrivate":true,"id":"_depthBufferEnabledName","line":"31","kind":"variable"},{"ref":{"refId":"dart.core/String","name":"String"},"isStatic":true,"comment":"Serialization name for [depthBufferWriteEnabled].","name":"_depthBufferWriteEnabledName","isPrivate":true,"id":"_depthBufferWriteEnabledName","line":"33","kind":"variable"},{"ref":{"refId":"dart.core/String","name":"String"},"isStatic":true,"comment":"Serialization name for [depthBufferFunction].","name":"_depthBufferFunctionName","isPrivate":true,"id":"_depthBufferFunctionName","line":"35","kind":"variable"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"Whether depth buffering is enabled or disabled.\nThe default is true.","name":"_depthBufferEnabled","isPrivate":true,"id":"_depthBufferEnabled","line":"43","kind":"variable"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"Whether writing to the depth buffer is enabled or disabled.\nThe default is true.","name":"_depthBufferWriteEnabled","isPrivate":true,"id":"_depthBufferWriteEnabled","line":"46","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"The comparison function for the depth-buffer test.\nThe default is CompareFunction.LessEqual","name":"_depthBufferFunction","isPrivate":true,"id":"_depthBufferFunction","line":"49","kind":"variable"},{"comment":"Creates an instance of [DepthState] with default values.","name":"DepthState","id":"DepthState2()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"name","id":"name","kind":"param"},{"ref":{"refId":"spectre/GraphicsDevice","name":"GraphicsDevice"},"name":"device","id":"device","kind":"param"}],"line":"56","kind":"constructor"},{"comment":"Creates an instance of [DepthState] with a writeable depth buffer.","name":"DepthState.depthWrite","id":"DepthState.depthWrite2()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"name","id":"name","kind":"param"},{"ref":{"refId":"spectre/GraphicsDevice","name":"GraphicsDevice"},"name":"device","id":"device","kind":"param"}],"line":"60","kind":"constructor"},{"comment":"Creates an instance of [DepthState] with a read-only depth buffer.","name":"DepthState.depthRead","id":"DepthState.depthRead2()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"name","id":"name","kind":"param"},{"ref":{"refId":"spectre/GraphicsDevice","name":"GraphicsDevice"},"name":"device","id":"device","kind":"param"}],"line":"66","kind":"constructor"},{"comment":"Creates an instance of [DepthState] which doesn't use a depth buffer.","name":"DepthState.none","id":"DepthState.none2()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"name","id":"name","kind":"param"},{"ref":{"refId":"spectre/GraphicsDevice","name":"GraphicsDevice"},"name":"device","id":"device","kind":"param"}],"line":"72","kind":"constructor"}],"line":"25","kind":"class"},{"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"The debug draw manager manages a collection of debug primitives that are\ndrawn each frame. Each debug primitive has a lifetime and the manager\ncontinues to draw each primitive until its lifetime has expired.\n\nThe following primitives are supported:\n\n- Lines\n- Crosses\n- Spheres\n- Circles\n- Arcs\n- Transformations (coordinate axes)\n- Triangles\n- AABB (Axis Aligned Bounding Boxes)\n\n\nThe following properties can be controlled for each primitive:\n\n- Depth testing on or off.\n- Size.\n- Color.\n- Lifetime.\n\n","uri":"package:spectre/src/spectre/debug_draw_manager.dart","name":"DebugDrawManager","id":"DebugDrawManager","children":[{"returnType":{"refId":"void","name":"void"},"comment":"Add a line primitive extending from [start] to [finish].\nFilled with [color].\n\nOptional parameters: [duration] and [depthEnabled].\n","name":"addLine","id":"addLine5()","children":[{"ref":{"refId":"vector_math/Vector3","name":"Vector3"},"name":"start","id":"start","kind":"param"},{"ref":{"refId":"vector_math/Vector3","name":"Vector3"},"name":"finish","id":"finish","kind":"param"},{"ref":{"refId":"vector_math/Vector4","name":"Vector4"},"name":"color","id":"color","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/num","name":"num"},"isOptional":true,"defaultValue":"0.0","name":"duration","id":"duration","line":"261","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/bool","name":"bool"},"isOptional":true,"defaultValue":"true","name":"depthEnabled","id":"depthEnabled","line":"261","kind":"param"}],"line":"260","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Add a cross primitive at [point]. Filled with [color].\n\nOptional paremeters: [size], [duration], and [depthEnabled].\n","name":"addCross","id":"addCross5()","children":[{"ref":{"refId":"vector_math/Vector3","name":"Vector3"},"name":"point","id":"point","kind":"param"},{"ref":{"refId":"vector_math/Vector4","name":"Vector4"},"name":"color","id":"color","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/num","name":"num"},"isOptional":true,"defaultValue":"1.0","name":"size","id":"size","line":"274","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/num","name":"num"},"isOptional":true,"defaultValue":"0.0","name":"duration","id":"duration","line":"274","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/bool","name":"bool"},"isOptional":true,"defaultValue":"true","name":"depthEnabled","id":"depthEnabled","line":"274","kind":"param"}],"line":"273","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Add a sphere primitive at [center] with [radius]. Filled with [color].\n\nOptional paremeters: [duration] and [depthEnabled].\n","name":"addSphere","id":"addSphere5()","children":[{"ref":{"refId":"vector_math/Vector3","name":"Vector3"},"name":"center","id":"center","kind":"param"},{"ref":{"refId":"dart.core/num","name":"num"},"name":"radius","id":"radius","kind":"param"},{"ref":{"refId":"vector_math/Vector4","name":"Vector4"},"name":"color","id":"color","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/num","name":"num"},"isOptional":true,"defaultValue":"0.0","name":"duration","id":"duration","line":"293","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/bool","name":"bool"},"isOptional":true,"defaultValue":"true","name":"depthEnabled","id":"depthEnabled","line":"293","kind":"param"}],"line":"292","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Add an arc primitive at [center] in the plane whose normal is\n[planeNormal] with a [radius]. The arc begins at [startAngle] and extends\nto [stopAngle]. Filled with [color].\n\nOptional parameters: [duration], [depthEnabled], and [numSegments].\n","name":"addArc","id":"addArc9()","children":[{"ref":{"refId":"vector_math/Vector3","name":"Vector3"},"name":"center","id":"center","kind":"param"},{"ref":{"refId":"vector_math/Vector3","name":"Vector3"},"name":"planeNormal","id":"planeNormal","kind":"param"},{"ref":{"refId":"dart.core/num","name":"num"},"name":"radius","id":"radius","kind":"param"},{"ref":{"refId":"dart.core/num","name":"num"},"name":"startAngle","id":"startAngle","kind":"param"},{"ref":{"refId":"dart.core/num","name":"num"},"name":"stopAngle","id":"stopAngle","line":"348","kind":"param"},{"ref":{"refId":"vector_math/Vector4","name":"Vector4"},"name":"color","id":"color","line":"348","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/num","name":"num"},"isOptional":true,"defaultValue":"0.0","name":"duration","id":"duration","line":"348","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/bool","name":"bool"},"isOptional":true,"defaultValue":"true","name":"depthEnabled","id":"depthEnabled","line":"349","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/int","name":"int"},"isOptional":true,"defaultValue":"16","name":"numSegments","id":"numSegments","line":"349","kind":"param"}],"line":"347","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Add an circle primitive at [center] in the plane whose normal is\n[planeNormal] with a [radius]. Filled with [color].\n\nOptional parameters: [duration], [depthEnabled], and [numSegments].\n","name":"addCircle","id":"addCircle7()","children":[{"ref":{"refId":"vector_math/Vector3","name":"Vector3"},"name":"center","id":"center","kind":"param"},{"ref":{"refId":"vector_math/Vector3","name":"Vector3"},"name":"planeNormal","id":"planeNormal","kind":"param"},{"ref":{"refId":"dart.core/num","name":"num"},"name":"radius","id":"radius","kind":"param"},{"ref":{"refId":"vector_math/Vector4","name":"Vector4"},"name":"color","id":"color","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/num","name":"num"},"isOptional":true,"defaultValue":"0.0","name":"duration","id":"duration","line":"386","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/bool","name":"bool"},"isOptional":true,"defaultValue":"true","name":"depthEnabled","id":"depthEnabled","line":"386","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/int","name":"int"},"isOptional":true,"defaultValue":"16","name":"numSegments","id":"numSegments","line":"387","kind":"param"}],"line":"385","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Add a coordinate system primitive. Derived from [xform]. Scaled by [size].\n\nX,Y, and Z axes are colored Red,Green, and Blue\n\nOptional paremeters: [duration], and [depthEnabled]","name":"addAxes","id":"addAxes4()","children":[{"ref":{"refId":"vector_math/Matrix4","name":"Matrix4"},"name":"xform","id":"xform","kind":"param"},{"ref":{"refId":"dart.core/num","name":"num"},"name":"size","id":"size","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/num","name":"num"},"isOptional":true,"defaultValue":"0.0","name":"duration","id":"duration","line":"425","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/bool","name":"bool"},"isOptional":true,"defaultValue":"true","name":"depthEnabled","id":"depthEnabled","line":"425","kind":"param"}],"line":"424","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Add a triangle primitives from vertices [vertex0], [vertex1],\nand [vertex2]. Filled with [color].\n\nOptional parameters: [duration] and [depthEnabled]","name":"addTriangle","id":"addTriangle6()","children":[{"ref":{"refId":"vector_math/Vector3","name":"Vector3"},"name":"vertex0","id":"vertex0","kind":"param"},{"ref":{"refId":"vector_math/Vector3","name":"Vector3"},"name":"vertex1","id":"vertex1","kind":"param"},{"ref":{"refId":"vector_math/Vector3","name":"Vector3"},"name":"vertex2","id":"vertex2","kind":"param"},{"ref":{"refId":"vector_math/Vector4","name":"Vector4"},"name":"color","id":"color","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/num","name":"num"},"isOptional":true,"defaultValue":"0.0","name":"duration","id":"duration","line":"509","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/bool","name":"bool"},"isOptional":true,"defaultValue":"true","name":"depthEnabled","id":"depthEnabled","line":"509","kind":"param"}],"line":"508","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Add an Axis Aligned Bounding Box with corners at [boxMin] and [boxMax].\nFilled with [color].\n\nOption parameters: [duration] and [depthEnabled]","name":"addAABB","id":"addAABB5()","children":[{"ref":{"refId":"vector_math/Vector3","name":"Vector3"},"name":"boxMin","id":"boxMin","kind":"param"},{"ref":{"refId":"vector_math/Vector3","name":"Vector3"},"name":"boxMax","id":"boxMax","kind":"param"},{"ref":{"refId":"vector_math/Vector4","name":"Vector4"},"name":"color","id":"color","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/num","name":"num"},"isOptional":true,"defaultValue":"0.0","name":"duration","id":"duration","line":"524","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/bool","name":"bool"},"isOptional":true,"defaultValue":"true","name":"depthEnabled","id":"depthEnabled","line":"524","kind":"param"}],"line":"523","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Prepare to render debug primitives","name":"prepareForRender","id":"prepareForRender0()","line":"580","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Render debug primitives for [Camera] [cam]","name":"render","id":"render1()","children":[{"ref":{"refId":"spectre/Camera","name":"Camera"},"name":"cam","id":"cam","kind":"param"}],"line":"586","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Update time [seconds], removing any dead debug primitives","name":"update","id":"update1()","children":[{"ref":{"refId":"dart.core/num","name":"num"},"name":"seconds","id":"seconds","kind":"param"}],"line":"609","kind":"method"},{"ref":{"refId":"spectre/DepthState","name":"DepthState"},"name":"_depthState","isPrivate":true,"id":"_depthState","line":"217","kind":"variable"},{"ref":{"refId":"spectre/BlendState","name":"BlendState"},"name":"_blendState","isPrivate":true,"id":"_blendState","line":"218","kind":"variable"},{"ref":{"refId":"spectre/RasterizerState","name":"RasterizerState"},"name":"_rasterizerState","isPrivate":true,"id":"_rasterizerState","line":"219","kind":"variable"},{"ref":{"refId":"spectre/VertexShader","name":"VertexShader"},"name":"_lineVertexShader","isPrivate":true,"id":"_lineVertexShader","line":"220","kind":"variable"},{"ref":{"refId":"spectre/FragmentShader","name":"FragmentShader"},"name":"_lineFragmentShader","isPrivate":true,"id":"_lineFragmentShader","line":"221","kind":"variable"},{"ref":{"refId":"spectre/ShaderProgram","name":"ShaderProgram"},"name":"_lineShaderProgram","isPrivate":true,"id":"_lineShaderProgram","line":"222","kind":"variable"},{"ref":{"refId":"spectre/_DebugDrawLineManager","name":"_DebugDrawLineManager"},"name":"_depthEnabledLines","isPrivate":true,"id":"_depthEnabledLines","line":"223","kind":"variable"},{"ref":{"refId":"spectre/_DebugDrawLineManager","name":"_DebugDrawLineManager"},"name":"_depthDisabledLines","isPrivate":true,"id":"_depthDisabledLines","line":"224","kind":"variable"},{"ref":{"refId":"dart.typed_data/Float32List","name":"Float32List"},"name":"_cameraMatrix","isPrivate":true,"id":"_cameraMatrix","line":"226","kind":"variable"},{"ref":{"refId":"spectre/GraphicsDevice","name":"GraphicsDevice"},"isFinal":true,"name":"device","id":"device","line":"228","kind":"variable"},{"ref":{"refId":"vector_math/Vector3","name":"Vector3"},"isFinal":true,"name":"_circle_u","isPrivate":true,"id":"_circle_u","line":"338","kind":"variable"},{"ref":{"refId":"vector_math/Vector3","name":"Vector3"},"isFinal":true,"name":"_circle_v","isPrivate":true,"id":"_circle_v","line":"339","kind":"variable"},{"comment":"Construct and initialize a DebugDrawManager. Can specify maximum\nnumber of vertices with [maxVertices]. ","name":"DebugDrawManager","id":"DebugDrawManager2()","children":[{"initializedField":{"refId":"spectre/DebugDrawManager/device","name":"device"},"ref":{"refId":"spectre/GraphicsDevice","name":"GraphicsDevice"},"name":"device","id":"device","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/int","name":"int"},"isOptional":true,"defaultValue":"16384","name":"maxVertices","id":"maxVertices","kind":"param"}],"line":"232","kind":"constructor"}],"line":"216","kind":"class"},{"superclass":{"refId":"dart.core/Object","name":"Object"},"uri":"package:spectre/src/spectre/debug_draw_manager.dart","name":"_DebugDrawLineManager","isPrivate":true,"id":"_DebugDrawLineManager","children":[{"returnType":{"refId":"void","name":"void"},"name":"_prepareForRender","isPrivate":true,"id":"_prepareForRender1()","children":[{"ref":{"refId":"spectre/GraphicsContext","name":"GraphicsContext"},"name":"context","id":"context","kind":"param"}],"line":"159","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"update","id":"update1()","children":[{"ref":{"refId":"dart.core/num","name":"num"},"name":"dt","id":"dt","kind":"param"}],"line":"185","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"isFinal":true,"isStatic":true,"name":"DebugDrawVertexSize","id":"DebugDrawVertexSize","line":"129","kind":"variable"},{"ref":{"refId":"spectre/GraphicsDevice","name":"GraphicsDevice"},"isFinal":true,"name":"device","id":"device","line":"130","kind":"variable"},{"ref":{"refId":"spectre/_DebugLineCollection","name":"_DebugLineCollection"},"isFinal":true,"name":"lines","id":"lines","line":"131","kind":"variable"},{"ref":{"refId":"spectre/SingleArrayMesh","name":"SingleArrayMesh"},"name":"_lineMesh","isPrivate":true,"id":"_lineMesh","line":"132","kind":"variable"},{"ref":{"refId":"spectre/InputLayout","name":"InputLayout"},"name":"_lineMeshInputLayout","isPrivate":true,"id":"_lineMeshInputLayout","line":"133","kind":"variable"},{"ref":{"refId":"dart.typed_data/Float32List","name":"Float32List"},"name":"_vboStorage","isPrivate":true,"id":"_vboStorage","line":"135","kind":"variable"},{"name":"_DebugDrawLineManager","id":"_DebugDrawLineManager3()","children":[{"initializedField":{"refId":"spectre/_DebugDrawLineManager/device","name":"device"},"ref":{"refId":"spectre/GraphicsDevice","name":"GraphicsDevice"},"name":"device","id":"device","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"maxVertices","id":"maxVertices","kind":"param"},{"ref":{"refId":"spectre/ShaderProgram","name":"ShaderProgram"},"name":"shaderProgram","id":"shaderProgram","line":"138","kind":"param"}],"line":"137","kind":"constructor"}],"line":"128","kind":"class"},{"superclass":{"refId":"dart.core/Object","name":"Object"},"uri":"package:spectre/src/spectre/debug_draw_manager.dart","name":"_DebugLineCollection","isPrivate":true,"id":"_DebugLineCollection","children":[{"returnType":{"refId":"void","name":"void"},"name":"startLineObject","id":"startLineObject5()","children":[{"ref":{"refId":"dart.core/double","name":"double"},"name":"r","id":"r","kind":"param"},{"ref":{"refId":"dart.core/double","name":"double"},"name":"g","id":"g","kind":"param"},{"ref":{"refId":"dart.core/double","name":"double"},"name":"b","id":"b","kind":"param"},{"ref":{"refId":"dart.core/double","name":"double"},"name":"a","id":"a","kind":"param"},{"ref":{"refId":"dart.core/double","name":"double"},"name":"duration","id":"duration","kind":"param"}],"line":"52","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"finishLineObject","id":"finishLineObject0()","line":"68","kind":"method"},{"returnType":{"refId":"spectre/_DebugLineVertex","name":"_DebugLineVertex"},"name":"getVertex","id":"getVertex0()","line":"72","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"addVertex","id":"addVertex3()","children":[{"ref":{"refId":"dart.core/double","name":"double"},"name":"x","id":"x","kind":"param"},{"ref":{"refId":"dart.core/double","name":"double"},"name":"y","id":"y","kind":"param"},{"ref":{"refId":"dart.core/double","name":"double"},"name":"z","id":"z","kind":"param"}],"line":"79","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"freeLineObject","id":"freeLineObject1()","children":[{"ref":{"refId":"spectre/_DebugLineObject","name":"_DebugLineObject"},"name":"lineObject","id":"lineObject","kind":"param"}],"line":"88","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"update","id":"update1()","children":[{"ref":{"refId":"dart.core/num","name":"num"},"name":"dt","id":"dt","kind":"param"}],"line":"98","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"_addLine","isPrivate":true,"id":"_addLine2()","children":[{"ref":{"refId":"vector_math/Vector3","name":"Vector3"},"name":"start","id":"start","kind":"param"},{"ref":{"refId":"vector_math/Vector3","name":"Vector3"},"name":"finish","id":"finish","kind":"param"}],"line":"116","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"_addLineRaw","isPrivate":true,"id":"_addLineRaw6()","children":[{"ref":{"refId":"dart.core/double","name":"double"},"name":"sx","id":"sx","kind":"param"},{"ref":{"refId":"dart.core/double","name":"double"},"name":"sy","id":"sy","kind":"param"},{"ref":{"refId":"dart.core/double","name":"double"},"name":"sz","id":"sz","kind":"param"},{"ref":{"refId":"dart.core/double","name":"double"},"name":"fx","id":"fx","line":"122","kind":"param"},{"ref":{"refId":"dart.core/double","name":"double"},"name":"fy","id":"fy","line":"122","kind":"param"},{"ref":{"refId":"dart.core/double","name":"double"},"name":"fz","id":"fz","line":"122","kind":"param"}],"line":"121","kind":"method"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"spectre/_DebugLineVertex","name":"_DebugLineVertex"}],"name":"List"},"name":"_freeLineVertices","isPrivate":true,"id":"_freeLineVertices","line":"40","kind":"variable"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"spectre/_DebugLineObject","name":"_DebugLineObject"}],"name":"List"},"name":"_freeLineObjects","isPrivate":true,"id":"_freeLineObjects","line":"41","kind":"variable"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"spectre/_DebugLineObject","name":"_DebugLineObject"}],"name":"List"},"name":"_lineObjects","isPrivate":true,"id":"_lineObjects","line":"42","kind":"variable"},{"ref":{"refId":"spectre/_DebugLineObject","name":"_DebugLineObject"},"name":"_lineObject","isPrivate":true,"id":"_lineObject","line":"44","kind":"variable"},{"name":"_DebugLineCollection","id":"_DebugLineCollection0()","line":"46","kind":"constructor"}],"line":"39","kind":"class"},{"superclass":{"refId":"dart.core/Object","name":"Object"},"uri":"package:spectre/src/spectre/debug_draw_manager.dart","name":"_DebugLineObject","isPrivate":true,"id":"_DebugLineObject","children":[{"ref":{"refId":"dart.core/double","name":"double"},"name":"r","id":"r","line":"31","kind":"variable"},{"ref":{"refId":"dart.core/double","name":"double"},"name":"g","id":"g","line":"32","kind":"variable"},{"ref":{"refId":"dart.core/double","name":"double"},"name":"b","id":"b","line":"33","kind":"variable"},{"ref":{"refId":"dart.core/double","name":"double"},"name":"a","id":"a","line":"34","kind":"variable"},{"ref":{"refId":"dart.core/double","name":"double"},"name":"duration","id":"duration","line":"35","kind":"variable"},{"ref":{"refId":"spectre/_DebugLineVertex","name":"_DebugLineVertex"},"name":"vertexStream","id":"vertexStream","line":"36","kind":"variable"}],"line":"30","kind":"class"},{"superclass":{"refId":"dart.core/Object","name":"Object"},"uri":"package:spectre/src/spectre/debug_draw_manager.dart","name":"_DebugLineVertex","isPrivate":true,"id":"_DebugLineVertex","children":[{"ref":{"refId":"dart.core/double","name":"double"},"name":"x","id":"x","line":"24","kind":"variable"},{"ref":{"refId":"dart.core/double","name":"double"},"name":"y","id":"y","line":"25","kind":"variable"},{"ref":{"refId":"dart.core/double","name":"double"},"name":"z","id":"z","line":"26","kind":"variable"},{"ref":{"refId":"spectre/_DebugLineVertex","name":"_DebugLineVertex"},"name":"next","id":"next","line":"27","kind":"variable"}],"line":"23","kind":"class"},{"superclass":{"refId":"spectre/Enum","name":"Enum"},"comment":"Data Type.","uri":"package:spectre/src/spectre/data_type.dart","name":"DataType","id":"DataType","children":[{"returnType":{"refId":"dart.core/int","name":"int"},"isStatic":true,"comment":"Convert a [String] to a [DataType].","name":"parse","id":"parse1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"name","id":"name","kind":"param"}],"line":"44","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"isStatic":true,"comment":"Convert a [DataType] to a [String].","name":"stringify","id":"stringify1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"value","id":"value","kind":"param"}],"line":"46","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"isStatic":true,"comment":"Checks whether the value is a valid enumeration.","name":"isValid","id":"isValid1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"value","id":"value","kind":"param"}],"line":"48","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"Int8","id":"Int8","line":"25","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"Uint8","id":"Uint8","line":"26","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"Int16","id":"Int16","line":"27","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"Uint16","id":"Uint16","line":"28","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"Int32","id":"Int32","line":"29","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"Uint32","id":"Uint32","line":"30","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"Float32","id":"Float32","line":"31","kind":"variable"},{"ref":{"refId":"dart.core/Map","arguments":[{"refId":"dart.core/String","name":"String"},{"refId":"dart.core/int","name":"int"}],"name":"Map"},"isStatic":true,"name":"_values","isPrivate":true,"id":"_values","line":"33","kind":"variable"}],"kind":"class"},{"superclass":{"refId":"spectre/Enum","name":"Enum"},"comment":"Indicates whether triangles facing a particular direction are drawn.","uri":"package:spectre/src/spectre/cull_mode.dart","name":"CullMode","id":"CullMode","children":[{"returnType":{"refId":"dart.core/int","name":"int"},"isStatic":true,"comment":"Convert a [String] to a [CullMode].","name":"parse","id":"parse1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"name","id":"name","kind":"param"}],"line":"39","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"isStatic":true,"comment":"Convert a [CullMode] to a [String].","name":"stringify","id":"stringify1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"value","id":"value","kind":"param"}],"line":"41","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"isStatic":true,"comment":"Checks whether the value is a valid enumeration.","name":"isValid","id":"isValid1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"value","id":"value","kind":"param"}],"line":"43","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"comment":"Always draw.","name":"None","id":"None","line":"26","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"comment":"Do not draw if triangle is front-facing.","name":"Front","id":"Front","line":"28","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"comment":"Do not draw if triangle is back-facing.","name":"Back","id":"Back","line":"30","kind":"variable"},{"ref":{"refId":"dart.core/Map","arguments":[{"refId":"dart.core/String","name":"String"},{"refId":"dart.core/int","name":"int"}],"name":"Map"},"isStatic":true,"name":"_values","isPrivate":true,"id":"_values","line":"32","kind":"variable"}],"kind":"class"},{"superclass":{"refId":"spectre/Enum","name":"Enum"},"comment":"Defines comparison functions that can be chosen for stencil,\nor depth-buffer tests.","uri":"package:spectre/src/spectre/compare_function.dart","name":"CompareFunction","id":"CompareFunction","children":[{"returnType":{"refId":"dart.core/int","name":"int"},"isStatic":true,"comment":"Convert a [String] to a [CompareFunction].","name":"parse","id":"parse1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"name","id":"name","kind":"param"}],"line":"61","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"isStatic":true,"comment":"Convert a [CompareFunction] to a [String].","name":"stringify","id":"stringify1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"value","id":"value","kind":"param"}],"line":"63","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"isStatic":true,"comment":"Checks whether the value is a valid enumeration.","name":"isValid","id":"isValid1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"value","id":"value","kind":"param"}],"line":"65","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"comment":"Always pass the test.","name":"Always","id":"Always","line":"27","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"comment":"Accept the new pixel if its value is equal to the value of the current\npixel.","name":"Equal","id":"Equal","line":"30","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"comment":"Accept the new pixel if its value is greater than the value of the\ncurrent pixel.","name":"Greater","id":"Greater","line":"33","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"comment":"Accept the new pixel if its value is greater than or equal to the value\nof the current pixel.","name":"GreaterEqual","id":"GreaterEqual","line":"36","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"comment":"Accept the new pixel if its value is less than the value of the current\npixel.","name":"Less","id":"Less","line":"39","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"comment":"Accept the new pixel if its value is less than or equal to the value of\nthe current pixel.","name":"LessEqual","id":"LessEqual","line":"42","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"comment":"Always fail the test.","name":"Fail","id":"Fail","line":"44","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"comment":" Accept the new pixel if its value does not equal the value of the\ncurrent pixel.","name":"NotEqual","id":"NotEqual","line":"47","kind":"variable"},{"ref":{"refId":"dart.core/Map","arguments":[{"refId":"dart.core/String","name":"String"},{"refId":"dart.core/int","name":"int"}],"name":"Map"},"isStatic":true,"name":"_values","isPrivate":true,"id":"_values","line":"49","kind":"variable"}],"line":"25","kind":"class"},{"isAbstract":true,"superclass":{"refId":"dart.core/Object","name":"Object"},"uri":"package:spectre/src/spectre/camera_controller.dart","name":"CameraController","id":"CameraController","children":[{"returnType":{"refId":"void","name":"void"},"name":"updateCamera","id":"updateCamera2()","children":[{"ref":{"refId":"dart.core/num","name":"num"},"name":"seconds","id":"seconds","kind":"param"},{"ref":{"refId":"spectre/Camera","name":"Camera"},"name":"cam","id":"cam","kind":"param"}],"line":"26","kind":"method"}],"line":"25","kind":"class"},{"superclass":{"refId":"dart.core/Object","name":"Object"},"uri":"package:spectre/src/spectre/camera.dart","name":"Camera","id":"Camera","children":[{"returnType":{"refId":"dart.core/String","name":"String"},"name":"toString","id":"toString0()","line":"32","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"copyProjectionMatrixIntoArray","id":"copyProjectionMatrixIntoArray1()","children":[{"ref":{"refId":"dart.typed_data/Float32List","name":"Float32List"},"name":"pm","id":"pm","kind":"param"}],"line":"71","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"copyViewMatrixIntoArray","id":"copyViewMatrixIntoArray1()","children":[{"ref":{"refId":"dart.typed_data/Float32List","name":"Float32List"},"name":"vm","id":"vm","kind":"param"}],"line":"76","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"copyNormalMatrixIntoArray","id":"copyNormalMatrixIntoArray1()","children":[{"ref":{"refId":"dart.typed_data/Float32List","name":"Float32List"},"name":"nm","id":"nm","kind":"param"}],"line":"81","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"copyProjectionMatrix","id":"copyProjectionMatrix1()","children":[{"ref":{"refId":"vector_math/Matrix4","name":"Matrix4"},"name":"pm","id":"pm","kind":"param"}],"line":"86","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"copyViewMatrix","id":"copyViewMatrix1()","children":[{"ref":{"refId":"vector_math/Matrix4","name":"Matrix4"},"name":"vm","id":"vm","kind":"param"}],"line":"91","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"copyNormalMatrix","id":"copyNormalMatrix1()","children":[{"ref":{"refId":"vector_math/Matrix4","name":"Matrix4"},"name":"nm","id":"nm","kind":"param"}],"line":"96","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"copyEyePosition","id":"copyEyePosition1()","children":[{"ref":{"refId":"vector_math/Vector3","name":"Vector3"},"name":"ep","id":"ep","kind":"param"}],"line":"101","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"copyLookAtPosition","id":"copyLookAtPosition1()","children":[{"ref":{"refId":"vector_math/Vector3","name":"Vector3"},"name":"lap","id":"lap","kind":"param"}],"line":"105","kind":"method"},{"ref":{"refId":"dart.core/num","name":"num"},"name":"yaw","id":"yaw","line":"47","kind":"property"},{"ref":{"refId":"dart.core/num","name":"num"},"name":"pitch","id":"pitch","line":"55","kind":"property"},{"ref":{"refId":"vector_math/Matrix4","name":"Matrix4"},"name":"projectionMatrix","id":"projectionMatrix","line":"63","kind":"property"},{"ref":{"refId":"vector_math/Matrix4","name":"Matrix4"},"name":"viewMatrix","id":"viewMatrix","line":"67","kind":"property"},{"ref":{"refId":"vector_math/Vector3","name":"Vector3"},"name":"frontDirection","id":"frontDirection","line":"109","kind":"property"},{"ref":{"refId":"vector_math/Vector3","name":"Vector3"},"name":"position","id":"position","line":"24","kind":"variable"},{"ref":{"refId":"vector_math/Vector3","name":"Vector3"},"name":"upDirection","id":"upDirection","line":"25","kind":"variable"},{"ref":{"refId":"vector_math/Vector3","name":"Vector3"},"name":"focusPosition","id":"focusPosition","line":"26","kind":"variable"},{"ref":{"refId":"dart.core/num","name":"num"},"name":"zNear","id":"zNear","line":"27","kind":"variable"},{"ref":{"refId":"dart.core/num","name":"num"},"name":"zFar","id":"zFar","line":"28","kind":"variable"},{"ref":{"refId":"dart.core/num","name":"num"},"name":"aspectRatio","id":"aspectRatio","line":"29","kind":"variable"},{"ref":{"refId":"dart.core/num","name":"num"},"name":"FOV","id":"FOV","line":"30","kind":"variable"},{"name":"Camera","id":"Camera0()","line":"36","kind":"constructor"}],"line":"23","kind":"class"},{"superclass":{"refId":"spectre/DeviceChild","name":"DeviceChild"},"comment":"A [SpectreBuffer] represents a buffer of memory on the GPU.\nA [SpectreBuffer] can only be constructed by constructing an [IndexBuffer]\nor a [VertexBuffer].\n","uri":"package:spectre/src/spectre/buffer.dart","name":"SpectreBuffer","id":"SpectreBuffer","children":[{"returnType":{"refId":"void","name":"void"},"name":"finalize","id":"finalize0()","line":"40","kind":"method"},{"returnType":{"refId":"dart.dom.web_gl/Buffer","name":"Buffer"},"name":"_pushBind","isPrivate":true,"id":"_pushBind0()","line":"46","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"_bind","isPrivate":true,"id":"_bind0()","line":"52","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"_popBind","isPrivate":true,"id":"_popBind1()","children":[{"ref":{"refId":"dart.dom.web_gl/Buffer","name":"Buffer"},"name":"oldBind","id":"oldBind","kind":"param"}],"line":"56","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"_uploadData","isPrivate":true,"id":"_uploadData2()","children":[{"name":"data","id":"data","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"usage","id":"usage","kind":"param"}],"line":"60","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Resize buffer to fit [data]. Upload [data] with [usage] hint. ","name":"uploadData","id":"uploadData2()","children":[{"name":"data","id":"data","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"usage","id":"usage","kind":"param"}],"line":"67","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"_uploadSubData","isPrivate":true,"id":"_uploadSubData2()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"offset","id":"offset","kind":"param"},{"name":"data","id":"data","kind":"param"}],"line":"76","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Starting at [offset], upload [data] into buffer.\nThe length of [data] + offset must not exceed the size of the buffer\n","name":"uploadSubData","id":"uploadSubData2()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"offset","id":"offset","kind":"param"},{"name":"data","id":"data","kind":"param"}],"line":"83","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"_allocate","isPrivate":true,"id":"_allocate2()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"size","id":"size","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"usage","id":"usage","kind":"param"}],"line":"96","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Resize buffer to be [size] bytes with [usage] hint. ","name":"allocate","id":"allocate2()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"size","id":"size","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"usage","id":"usage","kind":"param"}],"line":"103","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"Query the size of the buffer ","name":"size","id":"size","line":"113","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"Query the usage hint of the buffer ","name":"usage","id":"usage","line":"116","kind":"property"},{"ref":{"refId":"dart.dom.web_gl/Buffer","name":"Buffer"},"name":"_deviceBuffer","isPrivate":true,"id":"_deviceBuffer","line":"28","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isFinal":true,"name":"_bindTarget","isPrivate":true,"id":"_bindTarget","line":"29","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isFinal":true,"name":"_bindingParam","isPrivate":true,"id":"_bindingParam","line":"30","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"_usage","isPrivate":true,"id":"_usage","line":"31","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"_size","isPrivate":true,"id":"_size","line":"32","kind":"variable"},{"name":"SpectreBuffer","id":"SpectreBuffer4()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"name","id":"name","kind":"param"},{"ref":{"refId":"spectre/GraphicsDevice","name":"GraphicsDevice"},"name":"device","id":"device","kind":"param"},{"initializedField":{"refId":"spectre/SpectreBuffer/_bindTarget","name":"_bindTarget"},"ref":{"refId":"dart.core/int","name":"int"},"name":"_bindTarget","isPrivate":true,"id":"_bindTarget","line":"35","kind":"param"},{"initializedField":{"refId":"spectre/SpectreBuffer/_bindingParam","name":"_bindingParam"},"ref":{"refId":"dart.core/int","name":"int"},"name":"_bindingParam","isPrivate":true,"id":"_bindingParam","line":"35","kind":"param"}],"line":"34","kind":"constructor"}],"line":"27","kind":"class"},{"superclass":{"refId":"spectre/DeviceChild","name":"DeviceChild"},"comment":"BlendState controls how output from your fragment shader is blended onto\nthe framebuffer. Set using [GraphicsContext.setBlendState].","uri":"package:spectre/src/spectre/blend_state.dart","name":"BlendState","id":"BlendState","children":[{"isSetter":true,"name":"enabled=","id":"enabled=1()","children":[{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"value","id":"value","kind":"param"}],"line":"159","kind":"method"},{"isSetter":true,"comment":"The red component of the blend factor for alpha blending.\nThrows [ArgumentError] if [value] is not in the range [0, 1].","name":"blendFactorRed=","id":"blendFactorRed=1()","children":[{"ref":{"refId":"dart.core/double","name":"double"},"name":"value","id":"value","kind":"param"}],"line":"163","kind":"method"},{"isSetter":true,"comment":"The green component of the blend factor for alpha blending.\nThrows [ArgumentError] if [value] is not in the range [0, 1].","name":"blendFactorGreen=","id":"blendFactorGreen=1()","children":[{"ref":{"refId":"dart.core/double","name":"double"},"name":"value","id":"value","kind":"param"}],"line":"176","kind":"method"},{"isSetter":true,"comment":"The blue component of the blend factor for alpha blending.\nThrows [ArgumentError] if [value] is not in the range [0, 1].","name":"blendFactorBlue=","id":"blendFactorBlue=1()","children":[{"ref":{"refId":"dart.core/double","name":"double"},"name":"value","id":"value","kind":"param"}],"line":"189","kind":"method"},{"isSetter":true,"comment":"The alpha component of the blend factor for alpha blending.\nThrows [ArgumentError] if [value] is not in the range [0, 1].","name":"blendFactorAlpha=","id":"blendFactorAlpha=1()","children":[{"ref":{"refId":"dart.core/double","name":"double"},"name":"value","id":"value","kind":"param"}],"line":"202","kind":"method"},{"isSetter":true,"comment":"The arithmetic operation when blending alpha values.\nThe default is [BlendOperation.Add]. Throws [ArgumentError] if the\n[value] is not an enumeration within [BlendOperation].","name":"alphaBlendOperation=","id":"alphaBlendOperation=1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"value","id":"value","kind":"param"}],"line":"216","kind":"method"},{"isSetter":true,"comment":"The blend factor for the destination alpha; the percentage of the\ndestination alpha included in the result. The default is [Blend.One].\nThrows [ArgumentError] if the [value] is not an enumeration within\n[Blend].","name":"alphaDestinationBlend=","id":"alphaDestinationBlend=1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"value","id":"value","kind":"param"}],"line":"231","kind":"method"},{"isSetter":true,"comment":"The alpha blend factor.\nThe default is [Blend.One].\nThrows [ArgumentError] if the [value] is not an enumeration within\n[Blend].","name":"alphaSourceBlend=","id":"alphaSourceBlend=1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"value","id":"value","kind":"param"}],"line":"246","kind":"method"},{"isSetter":true,"comment":"The arithmetic operation when blending color values.\nThe default is [BlendOperation.Add].\nThrows [ArgumentError] if the [value] is not an enumeration within\n[Blend].","name":"colorBlendOperation=","id":"colorBlendOperation=1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"value","id":"value","kind":"param"}],"line":"261","kind":"method"},{"isSetter":true,"comment":"The blend factor for the destination color.\nThe default is [Blend.One].\nThrows [ArgumentError] if the [value] is not an enumeration within\n[Blend].","name":"colorDestinationBlend=","id":"colorDestinationBlend=1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"value","id":"value","kind":"param"}],"line":"275","kind":"method"},{"isSetter":true,"comment":"The blend factor for the source color.\nThe default is Blend.One.\nThrows [ArgumentError] if the [value] is not an enumeration within\n[Blend].","name":"colorSourceBlend=","id":"colorSourceBlend=1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"value","id":"value","kind":"param"}],"line":"290","kind":"method"},{"isSetter":true,"name":"writeRenderTargetRed=","id":"writeRenderTargetRed=1()","children":[{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"value","id":"value","kind":"param"}],"line":"303","kind":"method"},{"isSetter":true,"name":"writeRenderTargetGreen=","id":"writeRenderTargetGreen=1()","children":[{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"value","id":"value","kind":"param"}],"line":"307","kind":"method"},{"isSetter":true,"name":"writeRenderTargetBlue=","id":"writeRenderTargetBlue=1()","children":[{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"value","id":"value","kind":"param"}],"line":"311","kind":"method"},{"isSetter":true,"name":"writeRenderTargetAlpha=","id":"writeRenderTargetAlpha=1()","children":[{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"value","id":"value","kind":"param"}],"line":"315","kind":"method"},{"comment":"Serializes the [BlendState] to a JSON.","name":"toJson","id":"toJson0()","line":"322","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Deserializes the [BlendState] from a JSON.","name":"fromJson","id":"fromJson1()","children":[{"ref":{"refId":"dart.core/Map","name":"Map"},"name":"values","id":"values","kind":"param"}],"line":"355","kind":"method"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"Whether blending operations are enabled.","name":"enabled","id":"enabled","line":"158","kind":"property"},{"ref":{"refId":"dart.core/double","name":"double"},"name":"blendFactorRed","id":"blendFactorRed","line":"172","kind":"property"},{"ref":{"refId":"dart.core/double","name":"double"},"name":"blendFactorGreen","id":"blendFactorGreen","line":"184","kind":"property"},{"ref":{"refId":"dart.core/double","name":"double"},"name":"blendFactorBlue","id":"blendFactorBlue","line":"197","kind":"property"},{"ref":{"refId":"dart.core/double","name":"double"},"name":"blendFactorAlpha","id":"blendFactorAlpha","line":"210","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"alphaBlendOperation","id":"alphaBlendOperation","line":"224","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"alphaDestinationBlend","id":"alphaDestinationBlend","line":"239","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"alphaSourceBlend","id":"alphaSourceBlend","line":"254","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"colorBlendOperation","id":"colorBlendOperation","line":"269","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"colorDestinationBlend","id":"colorDestinationBlend","line":"283","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"colorSourceBlend","id":"colorSourceBlend","line":"298","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"Whether the red channel is enabled for writing during color blending.","name":"writeRenderTargetRed","id":"writeRenderTargetRed","line":"302","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"Whether the green channel is enabled for writing during color blending.","name":"writeRenderTargetGreen","id":"writeRenderTargetGreen","line":"306","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"Whether the blue channel is enabled for writing during color blending.","name":"writeRenderTargetBlue","id":"writeRenderTargetBlue","line":"310","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"Whether the alpha channel is enabled for writing during color blending.","name":"writeRenderTargetAlpha","id":"writeRenderTargetAlpha","line":"314","kind":"property"},{"ref":{"refId":"dart.core/String","name":"String"},"isStatic":true,"comment":"Serialization name for [enabled].","name":"_blendEnabledName","isPrivate":true,"id":"_blendEnabledName","line":"31","kind":"variable"},{"ref":{"refId":"dart.core/String","name":"String"},"isStatic":true,"comment":"Serialization name for [blendFactorRed].","name":"_blendFactorRedName","isPrivate":true,"id":"_blendFactorRedName","line":"33","kind":"variable"},{"ref":{"refId":"dart.core/String","name":"String"},"isStatic":true,"comment":"Serialization name for [blendFactorGreen].","name":"_blendFactorGreenName","isPrivate":true,"id":"_blendFactorGreenName","line":"35","kind":"variable"},{"ref":{"refId":"dart.core/String","name":"String"},"isStatic":true,"comment":"Serialization name for [blendFactorBlue].","name":"_blendFactorBlueName","isPrivate":true,"id":"_blendFactorBlueName","line":"37","kind":"variable"},{"ref":{"refId":"dart.core/String","name":"String"},"isStatic":true,"comment":"Serialization name for [blendFactorAlpha].","name":"_blendFactorAlphaName","isPrivate":true,"id":"_blendFactorAlphaName","line":"39","kind":"variable"},{"ref":{"refId":"dart.core/String","name":"String"},"isStatic":true,"comment":"Serialization name for [alphaBlendOperation].","name":"_alphaBlendOperationName","isPrivate":true,"id":"_alphaBlendOperationName","line":"41","kind":"variable"},{"ref":{"refId":"dart.core/String","name":"String"},"isStatic":true,"comment":"Serialization name for [alphaDestinationBlend].","name":"_alphaDestinationBlendName","isPrivate":true,"id":"_alphaDestinationBlendName","line":"43","kind":"variable"},{"ref":{"refId":"dart.core/String","name":"String"},"isStatic":true,"comment":"Serialization name for [alphaSourceBlend].","name":"_alphaSourceBlendName","isPrivate":true,"id":"_alphaSourceBlendName","line":"45","kind":"variable"},{"ref":{"refId":"dart.core/String","name":"String"},"isStatic":true,"comment":"Serialization name for [colorBlendOperation].","name":"_colorBlendOperationName","isPrivate":true,"id":"_colorBlendOperationName","line":"47","kind":"variable"},{"ref":{"refId":"dart.core/String","name":"String"},"isStatic":true,"comment":"Serialization name for [colorDestinationBlend].","name":"_colorDestinationBlendName","isPrivate":true,"id":"_colorDestinationBlendName","line":"49","kind":"variable"},{"ref":{"refId":"dart.core/String","name":"String"},"isStatic":true,"comment":"Serialization name for [colorSourceBlend].","name":"_colorSourceBlendName","isPrivate":true,"id":"_colorSourceBlendName","line":"51","kind":"variable"},{"ref":{"refId":"dart.core/String","name":"String"},"isStatic":true,"comment":"Serialization name for [writeRenderTargetRed].","name":"_writeRenderTargetRedName","isPrivate":true,"id":"_writeRenderTargetRedName","line":"53","kind":"variable"},{"ref":{"refId":"dart.core/String","name":"String"},"isStatic":true,"comment":"Serialization name for [writeRenderTargetGreen].","name":"_writeRenderTargetGreenName","isPrivate":true,"id":"_writeRenderTargetGreenName","line":"55","kind":"variable"},{"ref":{"refId":"dart.core/String","name":"String"},"isStatic":true,"comment":"Serialization name for [writeRenderTargetBlue].","name":"_writeRenderTargetBlueName","isPrivate":true,"id":"_writeRenderTargetBlueName","line":"57","kind":"variable"},{"ref":{"refId":"dart.core/String","name":"String"},"isStatic":true,"comment":"Serialization name for [writeRenderTargetAlpha].","name":"_writeRenderTargetAlphaName","isPrivate":true,"id":"_writeRenderTargetAlphaName","line":"59","kind":"variable"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"Whether blending operations are enabled. Enabled by default.","name":"_enabled","isPrivate":true,"id":"_enabled","line":"66","kind":"variable"},{"ref":{"refId":"dart.core/double","name":"double"},"comment":"The red component of the blend factor for alpha blending.","name":"_blendFactorRed","isPrivate":true,"id":"_blendFactorRed","line":"69","kind":"variable"},{"ref":{"refId":"dart.core/double","name":"double"},"comment":"The green component of the blend factor for alpha blending.","name":"_blendFactorGreen","isPrivate":true,"id":"_blendFactorGreen","line":"71","kind":"variable"},{"ref":{"refId":"dart.core/double","name":"double"},"comment":"The blue component of the blend factor for alpha blending.","name":"_blendFactorBlue","isPrivate":true,"id":"_blendFactorBlue","line":"73","kind":"variable"},{"ref":{"refId":"dart.core/double","name":"double"},"comment":"The alpha component of the blend factor for alpha blending.","name":"_blendFactorAlpha","isPrivate":true,"id":"_blendFactorAlpha","line":"75","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"The arithmetic operation when blending alpha values.\nThe default is [BlendOperation.Add].","name":"_alphaBlendOperation","isPrivate":true,"id":"_alphaBlendOperation","line":"79","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"The blend factor for the destination alpha; the percentage of the\ndestination alpha included in the result.\nThe default is [Blend.One].","name":"_alphaDestinationBlend","isPrivate":true,"id":"_alphaDestinationBlend","line":"83","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"The alpha blend factor.\nThe default is [Blend.One].","name":"_alphaSourceBlend","isPrivate":true,"id":"_alphaSourceBlend","line":"86","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"The arithmetic operation when blending color values.\nThe default is [BlendOperation.Add].","name":"_colorBlendOperation","isPrivate":true,"id":"_colorBlendOperation","line":"89","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"The blend factor for the destination color.\nThe default is [Blend.One].","name":"_colorDestinationBlend","isPrivate":true,"id":"_colorDestinationBlend","line":"92","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"The blend factor for the source color.\nThe default is Blend.One.","name":"_colorSourceBlend","isPrivate":true,"id":"_colorSourceBlend","line":"95","kind":"variable"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"Whether the red channel is enabled for writing during color blending.","name":"_writeRenderTargetRed","isPrivate":true,"id":"_writeRenderTargetRed","line":"98","kind":"variable"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"Whether the green channel is enabled for writing during color blending.","name":"_writeRenderTargetGreen","isPrivate":true,"id":"_writeRenderTargetGreen","line":"100","kind":"variable"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"Whether the blue channel is enabled for writing during color blending.","name":"_writeRenderTargetBlue","isPrivate":true,"id":"_writeRenderTargetBlue","line":"102","kind":"variable"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"Whether the alpha channel is enabled for writing during color blending.","name":"_writeRenderTargetAlpha","isPrivate":true,"id":"_writeRenderTargetAlpha","line":"104","kind":"variable"},{"comment":"Creates an instance of the BlendState class with default values.","name":"BlendState","id":"BlendState2()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"name","id":"name","kind":"param"},{"ref":{"refId":"spectre/GraphicsDevice","name":"GraphicsDevice"},"name":"device","id":"device","kind":"param"}],"line":"111","kind":"constructor"},{"comment":"Initializes an instance of the BlendState class with settings for\nadditive blend. This adds the destination data to the source data without\nusing alpha.","name":"BlendState.additive","id":"BlendState.additive2()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"name","id":"name","kind":"param"},{"ref":{"refId":"spectre/GraphicsDevice","name":"GraphicsDevice"},"name":"device","id":"device","kind":"param"}],"line":"117","kind":"constructor"},{"comment":"Initializes an intance of the BlendState class with settings for alpha\nblend. This blends the source and destination data using alpha.","name":"BlendState.alphaBlend","id":"BlendState.alphaBlend2()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"name","id":"name","kind":"param"},{"ref":{"refId":"spectre/GraphicsDevice","name":"GraphicsDevice"},"name":"device","id":"device","kind":"param"}],"line":"126","kind":"constructor"},{"comment":"Initializes an instance of the BlendState class with settings for blending\nwith non-premultipled alpha. This blends source and destination data by\nusing alpha while assuming the color data contains no alpha information.","name":"BlendState.nonPremultiplied","id":"BlendState.nonPremultiplied2()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"name","id":"name","kind":"param"},{"ref":{"refId":"spectre/GraphicsDevice","name":"GraphicsDevice"},"name":"device","id":"device","kind":"param"}],"line":"136","kind":"constructor"},{"comment":"Initializes an instance of the BlendState class with settings for opaque\nblend. This overwrites the source with the destination data.","name":"BlendState.opaque","id":"BlendState.opaque2()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"name","id":"name","kind":"param"},{"ref":{"refId":"spectre/GraphicsDevice","name":"GraphicsDevice"},"name":"device","id":"device","kind":"param"}],"line":"145","kind":"constructor"}],"line":"25","kind":"class"},{"superclass":{"refId":"spectre/Enum","name":"Enum"},"uri":"package:spectre/src/spectre/blend_operation.dart","name":"BlendOperation","id":"BlendOperation","children":[{"returnType":{"refId":"dart.core/int","name":"int"},"isStatic":true,"comment":"Convert a [String] to a [BlendOperation].","name":"parse","id":"parse1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"name","id":"name","kind":"param"}],"line":"47","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"isStatic":true,"comment":"Convert a [BlendOperation] to a [String].","name":"stringify","id":"stringify1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"value","id":"value","kind":"param"}],"line":"49","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"isStatic":true,"comment":"Checks whether the value is a valid enumeration.","name":"isValid","id":"isValid1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"value","id":"value","kind":"param"}],"line":"51","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"comment":"The result is the destination added to the source.\n\n    Result = (Source Color * Source Blend) +\n             (Destination Color * Destination Blend)","name":"Add","id":"Add","line":"28","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"comment":"The result is the source subtracted from the destination.\n\n    Result = (Destination Color * Destination Blend) -\n             (Source Color * Source Blend)","name":"ReverseSubtract","id":"ReverseSubtract","line":"33","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"comment":"The result is the destination subtracted from the source.\n\n    Result = (Source Color * Source Blend) -\n             (Destination Color * Destination Blend)","name":"Subtract","id":"Subtract","line":"38","kind":"variable"},{"ref":{"refId":"dart.core/Map","arguments":[{"refId":"dart.core/String","name":"String"},{"refId":"dart.core/int","name":"int"}],"name":"Map"},"isStatic":true,"name":"_values","isPrivate":true,"id":"_values","line":"40","kind":"variable"}],"line":"23","kind":"class"},{"superclass":{"refId":"spectre/Enum","name":"Enum"},"comment":"Defines color blending factors.","uri":"package:spectre/src/spectre/blend.dart","name":"Blend","id":"Blend","children":[{"returnType":{"refId":"dart.core/int","name":"int"},"isStatic":true,"comment":"Convert a [String] to a [Blend].","name":"parse","id":"parse1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"name","id":"name","kind":"param"}],"line":"105","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"isStatic":true,"comment":"Convert a [Blend] to a [String].","name":"stringify","id":"stringify1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"value","id":"value","kind":"param"}],"line":"107","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"isStatic":true,"comment":"Checks whether the value is a valid enumeration.","name":"isValid","id":"isValid1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"value","id":"value","kind":"param"}],"line":"109","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"comment":"Each component of the color is multiplied by (0, 0, 0, 0).","name":"Zero","id":"Zero","line":"27","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"comment":"Each component of the color is multiplied by (1, 1, 1, 1).","name":"One","id":"One","line":"29","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"comment":"Each component of the color is multiplied by the source color.\n\nThis can be represented as (Rs, Gs, Bs, As), where R, G, B, and A\nrespectively stand for the red, green, blue, and alpha source values.","name":"SourceColor","id":"SourceColor","line":"34","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"comment":"Each component of the color is multiplied by the inverse of the source\ncolor.\nThis can be represented as (1 − Rs, 1 − Gs, 1 − Bs, 1 − As) where\nR, G, B, and A respectively stand for the red, green, blue, and alpha\ndestination values.","name":"InverseSourceColor","id":"InverseSourceColor","line":"40","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"comment":"Each component of the color is multiplied by the alpha value of the\nsource. This can be represented as (As, As, As, As), where As is the\nalpha source value.","name":"SourceAlpha","id":"SourceAlpha","line":"44","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"comment":"Each component of the color is multiplied by the inverse of the alpha\nvalue of the source.\nThis can be represented as (1 − As, 1 − As, 1 − As, 1 − As), where As is\nthe alpha destination value.","name":"InverseSourceAlpha","id":"InverseSourceAlpha","line":"49","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"comment":"Each component of the color is multiplied by the alpha value of the\ndestination.\n\nThis can be represented as (Ad, Ad, Ad, Ad), where Ad is the destination\nalpha value.","name":"DestinationAlpha","id":"DestinationAlpha","line":"55","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"comment":"Each component of the color is multiplied by the inverse of the alpha\nvalue of the destination.\n\nThis can be represented as (1 − Ad, 1 − Ad, 1 − Ad, 1 − Ad), where Ad is\nthe alpha destination value.","name":"InverseDestinationAlpha","id":"InverseDestinationAlpha","line":"61","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"comment":"Each component color is multiplied by the destination color.\n\nThis can be represented as (Rd, Gd, Bd, Ad), where R, G, B, and A\nrespectively stand for\nred, green, blue, and alpha destination values.","name":"DestinationColor","id":"DestinationColor","line":"67","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"comment":"Each component of the color is multiplied by the inverse of the\ndestination color.\n\nThis can be represented as (1 − Rd, 1 − Gd, 1 − Bd, 1 − Ad), where\nRd, Gd, Bd, and Ad respectively stand for the red, green, blue, and alpha\ndestination values.","name":"InverseDestinationColor","id":"InverseDestinationColor","line":"74","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"comment":"Each component of the color is multiplied by either the alpha of the\nsource color, or the inverse of the alpha of the source color, whichever\nis greater.\n\nThis can be represented as (f, f, f, 1), where f = min(A, 1 − Ad).","name":"SourceAlphaSaturation","id":"SourceAlphaSaturation","line":"80","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"comment":"Each component of the color is multiplied by a constant set in\nBlendFactor.","name":"BlendFactor","id":"BlendFactor","line":"83","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"comment":"Each component of the color is multiplied by the inverse of a constant\nset in BlendFactor.","name":"InverseBlendFactor","id":"InverseBlendFactor","line":"86","kind":"variable"},{"ref":{"refId":"dart.core/Map","arguments":[{"refId":"dart.core/String","name":"String"},{"refId":"dart.core/int","name":"int"}],"name":"Map"},"isStatic":true,"name":"_values","isPrivate":true,"id":"_values","line":"88","kind":"variable"}],"line":"25","kind":"class"},{"isAbstract":true,"superclass":{"refId":"disposable/Disposable","name":"Disposable"},"comment":"A resource created by a device\nAll resources have a [name]","uri":"package:spectre/src/spectre/device_child.dart","name":"DeviceChild","id":"DeviceChild","children":[{"returnType":{"refId":"dart.core/String","name":"String"},"name":"toString","id":"toString0()","line":"28","kind":"method"},{"name":"toJson","id":"toJson0()","line":"37","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"fromJson","id":"fromJson1()","children":[{"name":"a","id":"a","kind":"param"}],"line":"41","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"finalize","id":"finalize0()","line":"44","kind":"method"},{"ref":{"refId":"spectre/GraphicsDevice","name":"GraphicsDevice"},"isFinal":true,"name":"device","id":"device","line":"26","kind":"variable"},{"ref":{"refId":"dart.core/String","name":"String"},"isFinal":true,"name":"name","id":"name","line":"27","kind":"variable"},{"name":"DeviceChild._internal","isPrivate":true,"id":"DeviceChild._internal2()","children":[{"initializedField":{"refId":"spectre/DeviceChild/name","name":"name"},"ref":{"refId":"dart.core/String","name":"String"},"name":"name","id":"name","kind":"param"},{"initializedField":{"refId":"spectre/DeviceChild/device","name":"device"},"ref":{"refId":"spectre/GraphicsDevice","name":"GraphicsDevice"},"name":"device","id":"device","kind":"param"}],"line":"30","kind":"constructor"}],"line":"25","kind":"class"}],"line":"24","kind":"library"}